{"version":3,"sources":["actions/actionTypes.js","reducers/userBoardReducer.js","reducers/advancedOptionsReducer.js","reducers/pegColorsReducer.js","reducers/rootReducer.js","reducers/selectedIndexReducer.js","reducers/moveHistoryReducer.js","reducers/correctCodeReducer.js","reducers/gameStatusReducer.js","reducers/isPlayerWinnerReducer.js","reducers/scoreReducer.js","reducers/gameTypeReducer.js","reducers/versusModeReducer.js","reducers/turnChangeReducer.js","gameLogic/gameLogicFunctions.js","actions/actions.js","actions/retrieveApi.js","createStore.js","middlewares/getCodeFromApi.js","views/buttons/SubmitButton.js","containers/CreateOwnCodeSubmitContainer.js","views/buttons/CodeOptions.js","containers/CodeOptionsContainer.js","views/buttons/UserBoard.js","containers/UserBoardContainer.js","views/PlayerCreateCodeView.js","views/MoveHistory.js","containers/MoveHistoryContainer.js","containers/ScoreContainer.js","views/ScoreView.js","containers/AdvancedOptionsContainer.js","views/AdvancedOptionsView.js","containers/ChangeModeContainer.js","views/buttons/ChangeModeButton.js","containers/ModeDisplayContainer.js","views/ModeDisplay.js","containers/GameOptionsContainer.js","views/buttons/GameOptionsView.js","containers/GameOverContainer.js","views/GameOverView.js","containers/VersusButtonContainer.js","views/buttons/VersusModeButton.js","containers/HintButtonContainer.js","views/buttons/HintButton.js","containers/ChangeTurnContainer.js","views/ChangeTurnScreen.js","containers/ClassicModeSubmit.js","containers/AddExtraTurnContainer.js","views/buttons/AddExtraTurnButton.js","containers/TimedModeSubmitContainer.js","containers/PlayModeContainers.js","views/ClassicMode.js","views/TimedMode.js","containers/GameModeSelectContainer.js","views/buttons/GameModeSelectView.js","containers/MastermindContainer.js","views/Mastermind.js","views/CountdownTimer.js","containers/CountdownTimerContainer.js","containers/TurnsRemainingContainer.js","views/TurnsRemaining.js","containers/TitleContainer.js","views/TitleView.js","App.js","reportWebVitals.js","index.js"],"names":["SET_SECRET_CODE","USER_INPUT","SELECT_INPUT_SPOT","ADD_USER_MOVE","VERSUS_COMPUTER","VERSUS_PLAYER","GAME_WON","GAME_LOST","START_PLAYER","ADD_ANOTHER_TURN","CLASSIC_MODE","TIMED_MODE","CORRECT_GUESS","NEW_GAME","CHANGE_MODE","HINT_GIVEN","TWO_PLAYER","ONE_PLAYER","TWO_PLAYER_UPDATE_SCORE","TWO_PLAYER_CHANGE_TURN","START_TURN","SET_SCREEN_CHANGE","initialState","numbersGuessed","board","Array","hints","hintCount","intialState","computer","codeLength","codeOptions","turnsAllowed","turnsMade","timeAllowed","colorCodeGenerator","size","result","noDupColors","i","nums","Math","floor","random","checkStringInDups","join","rootReducer","combineReducers","userBoard","state","action","type","newBoard","fill","selectedCodeIndex","codeInput","copyBoard","slice","copyNumsGuessed","Object","assign","hint","index","value","nextHint","nextHintCount","nextNumsGuessed","updateBoard","nextBoard","move","moves","length","userSelected","moveHistory","newState","push","correctCode","code_info","advancedOptions","addTurn","turns","gameStatus","winner","score","gameType","isTwoPlayer","playerNumTurn","player1","player2","playerNum","playerScore","nextState","nextTurn","turnChange","pegColors","preprocessSubmit","userBoardValues","checkAnswer","userAnswer","correctAnswer","countOfEachNum","clone","red","white","user","checkUserGuess","code","previousMove","redPegs","whitePegs","usePhrase","setCode","actionUserMoveToHistory","versusPlayer","options","intergize","map","x","parseInt","versusComputer","gameWon","addExtraTurn","newGame","setTwoPlayer","changeTurn","twoPlayerAddScore","getRandomNumbers","range","a","fetch","response","status","console","log","text","receivedString","numArray","currentNum","stringToInt","isNaN","store","dispatch","newCode","countNums","randNum","Error","middlewares","next","thunk","createStore","applyMiddleware","SubmitButton","props","submit","useState","clickCount","clickAction","handleClick","alert","onClick","className","CreateOwnCodeSubmitContainer","connect","setPlayerCode","codeCreated","numCount","reduce","acc","num","setUserCreatedCode","mapStateToProps","mapDispatchToProps","CodeOptionButtons","styled","button","color","CodeOptions","inputChoiceInto","gameSize","propTypes","PropTypes","number","func","object","CodeOptionsContainer","UserBoardButton","hasHint","highlight","UserBoardContainer","changeInputSpot","selectInputSpot","boardLength","showOptions","PlayerCreateCodeView","sentenceOne","sentenceTwo","sentenceThree","randomPhraseGenerator","correct","PegDisplay","section","MoveHistoryContainer","previousMoves","display","history","correctGuess","randomPhrase","pegsDisplay","id","ScoreContainer","showScore","AdvancedOptionsContainer","startComputer","arg","startPlayer","startTwoPlayer","vsComputer","args","vsPlayer","lengthChange","optionsLength","optionsChange","turnsLength","turnsChange","changeTime","gameTypeInputs","onChange","event","target","min","max","ChangeModeContainer","switchModes","mode","newMode","ModeDisplayContainer","GameOptionsContainer","quickPlay","playAgain","toggleAdvanceOptions","selectDifficulty","modeDisplay","gamePlay","userChoice","clickHandler","GameOverContainer","showCode","oneMoreChance","toggleNewGame","isAnswerSeen","showAnswer","playAgainButton","gameSelect","loser","score1","score2","moveCounts","showAnswerButton","answer","isWinner","VersusModeContainer","onePlayer","twoPlayer","HintButtonContainer","getHint","previousGivenHints","undefined","handleHintGivenLogic","hintRequested","requestHint","ChangeTurnContainer","startTurn","handleSinglePlayerClassic","ClassicModeSubmit","handleTwoClassic","postCheckInfo","handleTwoPlayerClassic","handleSingleClassic","AddExtraTurnContainer","handleSinglePlayerTimed","TimedModeSubmitContainer","handleSingleTimed","handleTwoTimed","handleTwoPlayerTimed","ClassicModeContainer","TimedModeContainer","GameModeSelectContainer","selectClassic","selectTimed","MastermindContainer","minutesToMilliseconds","minutes","CountdownTimerContainer","finishGame","changePlayers","endGame","remainingTime","updateTime","countDownFrom","useRef","useEffect","current","interval","setInterval","clearInterval","toMinutes","toSeconds","seconds","TurnsRemainingContainer","TitleContainer","numPlayers","gameInfo","players","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81917d51.chunk.js","sourcesContent":["export const FETCH_CODE = \"FETCH_CODE\";\nexport const SET_SECRET_CODE = \"SET_SECRET_CODE\";\nexport const SET_LOADING_SCREEN = \"SET_LOADING_SCREEN\";\nexport const ERROR_GETTING_CODE = \"ERROR_GETTING_CODE\";\nexport const CODE_SIZE_SELECTED = \"CODE_SIZE_SELECTED \";\nexport const USER_INPUT = \"USER_INPUT\";\nexport const SELECT_INPUT_SPOT = \"SELECT_INPUT_SPOT\";\nexport const UNSELECT_INPUT_SPOT = \"UNSELECT_INPUT_SPOT\";\nexport const ADD_USER_MOVE = \"ADD_USER_MOVE\";\nexport const VERSUS_COMPUTER = \"VERSUS_COMPUTER\";\nexport const VERSUS_PLAYER = \"VERSUS_PLAYER\";\nexport const GAME_WON = \"GAME_WON\";\nexport const GAME_LOST = \"GAME_LOST\";\nexport const START_PLAYER = \"START_PLAYER\";\nexport const ADD_ANOTHER_TURN = \"ADD_ANOTHER_TURN\";\nexport const ONE_MORE_CHANCE = \"ONE_MORE_CHANCE\";\nexport const CLASSIC_MODE = \"CLASSIC_MODE\";\nexport const TIMED_MODE = \"TIMED_MODE\";\nexport const CORRECT_GUESS = \"CORRECT_GUESS\";\nexport const NEW_GAME = \"NEW_GAME\";\nexport const CHANGE_MODE = \"CHANGE_MODE\";\nexport const HINT_GIVEN = \"HINT_GIVEN\";\nexport const TWO_PLAYER = \"TWO_PLAYER\";\nexport const ONE_PLAYER = \"ONE PLAYER\";\nexport const TWO_PLAYER_UPDATE_SCORE = \"TWO_PLAYER_UPDATE_SCORE\";\nexport const TWO_PLAYER_CHANGE_TURN = \"TWO_PLAYER_CHANGE_TURN\";\nexport const START_TURN = \"START_TURN\";\nexport const SET_SCREEN_CHANGE = \"SET_SCREEN_CHANGE\";\nexport const PLAYER_SET_SECRET_CODE = \"PLAYER_SET_SECRET_CODE\";\n","import {\n  ADD_USER_MOVE,\n  HINT_GIVEN,\n  START_PLAYER,\n  USER_INPUT,\n  VERSUS_COMPUTER,\n  VERSUS_PLAYER,\n} from \"../actions/actionTypes\";\nconst initialState = {\n  numbersGuessed: 0,\n  board: new Array(4),\n  hints: {},\n  hintCount: 0,\n};\n\nexport function userBoardReducer(state = initialState, action) {\n  switch (action.type) {\n    case VERSUS_COMPUTER:\n    case VERSUS_PLAYER:\n    case START_PLAYER:\n      let { codeLength } = action;\n      let newBoard = new Array(codeLength).fill(0);\n      return { numbersGuessed: 0, board: newBoard, hints: {}, hintCount: 0 };\n    case USER_INPUT:\n      let { selectedCodeIndex, codeInput } = action;\n      let copyBoard = state.board.slice();\n      let copyNumsGuessed = state.numbersGuessed;\n      if (copyBoard[selectedCodeIndex] === 0) {\n        copyNumsGuessed++;\n      }\n      copyBoard[selectedCodeIndex] = codeInput;\n      return Object.assign({}, state, {\n        numbersGuessed: copyNumsGuessed,\n        board: copyBoard,\n      });\n    case HINT_GIVEN:\n      let { hint } = action;\n      let { index, value } = hint;\n      let nextHint = Object.assign({}, state.hints);\n      nextHint[index] = value;\n      let nextHintCount = state.hintCount + 1;\n      let nextNumsGuessed = state.board[index]\n        ? state.numbersGuessed\n        : state.numbersGuessed + 1;\n      let updateBoard = state.board.slice();\n      updateBoard[index] = value;\n      return Object.assign({}, state, {\n        hints: nextHint,\n        hintCount: nextHintCount,\n        numbersGuessed: nextNumsGuessed,\n        board: updateBoard,\n      });\n    case ADD_USER_MOVE:\n      //since we're leaving hints in players guess, we need to track hintCount to allow submit button to work.\n      let nextBoard = new Array(action.move.moves.length).fill(0);\n      for (let index in state.hints) {\n        nextBoard[index] = state.hints[index];\n      }\n      return Object.assign({}, state, {\n        numbersGuessed: state.hintCount,\n        board: nextBoard,\n      });\n    default:\n      return state;\n  }\n}\n","import {\n  ADD_USER_MOVE,\n  VERSUS_COMPUTER,\n  VERSUS_PLAYER,\n  ADD_ANOTHER_TURN,\n  TIMED_MODE,\n} from \"../actions/actionTypes\";\n\nconst intialState = {\n  computer: null,\n  codeLength: null,\n  codeOptions: null,\n  turnsAllowed: null,\n  turnsMade: 0,\n  timeAllowed: null,\n};\n\nexport function advancedOptionsReducer(state = intialState, action) {\n  switch (action.type) {\n    case VERSUS_COMPUTER:\n      return Object.assign({}, state, {\n        computer: true,\n        codeLength: action.codeLength,\n        codeOptions: action.codeOptions,\n        turnsMade: 0,\n        turnsAllowed: action.turnsAllowed,\n        timeAllowed: action.timeAllowed,\n      });\n    case VERSUS_PLAYER:\n      return Object.assign({}, state, {\n        computer: false,\n        codeLength: action.codeLength,\n        codeOptions: action.codeOptions,\n        turnsMade: 0,\n        turnsAllowed: action.turnsAllowed,\n        timeAllowed: action.timeAllowed,\n      });\n    case TIMED_MODE:\n      return Object.assign({}, state, { computer: true });\n    case ADD_USER_MOVE:\n      let turnsMade = state.turnsMade + 1;\n      return Object.assign({}, state, { turnsMade: turnsMade });\n    case ADD_ANOTHER_TURN:\n      let addTurn = state.turnsAllowed + action.turns;\n      return Object.assign({}, state, { turnsAllowed: addTurn });\n    default:\n      return state;\n  }\n}\n","import { VERSUS_COMPUTER, VERSUS_PLAYER } from \"../actions/actionTypes\";\n\nfunction colorCodeGenerator(size) {\n  let result = {};\n  let noDupColors = {};\n  for (let i = 1; i <= size; i++) {\n    let nums = [\n      Math.floor(Math.random() * 255),\n      Math.floor(Math.random() * 255),\n      Math.floor(Math.random() * 255),\n    ];\n    let checkStringInDups = nums.join(\",\");\n    while (noDupColors[checkStringInDups] === true) {\n      nums = [\n        Math.floor(Math.random() * 255),\n        Math.floor(Math.random() * 255),\n        Math.floor(Math.random() * 255),\n      ];\n      checkStringInDups = nums.join(\",\");\n    }\n    noDupColors[checkStringInDups] = true;\n    result[i] = `rgb(${nums[0]}, ${nums[1]}, ${nums[2]})`;\n  }\n  return result;\n}\n\nexport function pegColorsReducers(state = null, action) {\n  switch (action.type) {\n    case VERSUS_COMPUTER:\n    case VERSUS_PLAYER:\n      return colorCodeGenerator(action.codeOptions);\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { userBoardReducer } from \"./userBoardReducer\";\nimport { selectedIndexReducer } from \"./selectedIndexReducer\";\nimport { moveHistoryReducer } from \"./moveHistoryReducer\";\nimport { correctCodeReducer } from \"./correctCodeReducer\";\nimport { advancedOptionsReducer } from \"./advancedOptionsReducer\";\nimport { gameStatusReducer } from \"./gameStatusReducer\";\nimport { isPlayerWinnerReducer } from \"./isPlayerWinnerReducer\";\nimport { scoreReducer } from \"./scoreReducer\";\nimport { gameTypeReducer } from \"./gameTypeReducer\";\nimport { versusModeReducer } from \"./versusModeReducer\";\nimport { turnChangeReducer } from \"./turnChangeReducer\";\nimport { pegColorsReducers } from \"./pegColorsReducer\";\n\nexport const rootReducer = combineReducers({\n  userBoard: userBoardReducer,\n  userSelected: selectedIndexReducer,\n  moveHistory: moveHistoryReducer,\n  correctCode: correctCodeReducer,\n  advancedOptions: advancedOptionsReducer,\n  gameStatus: gameStatusReducer,\n  winner: isPlayerWinnerReducer,\n  score: scoreReducer,\n  gameType: gameTypeReducer,\n  isTwoPlayer: versusModeReducer,\n  turnChange: turnChangeReducer,\n  pegColors: pegColorsReducers,\n});\n","import {\n  ADD_USER_MOVE,\n  SELECT_INPUT_SPOT,\n  USER_INPUT,\n  VERSUS_COMPUTER,\n  VERSUS_PLAYER,\n} from \"../actions/actionTypes\";\n\nexport function selectedIndexReducer(state = null, action) {\n  switch (action.type) {\n    case SELECT_INPUT_SPOT:\n      return action.index;\n    case ADD_USER_MOVE:\n    case USER_INPUT:\n    case VERSUS_COMPUTER:\n    case VERSUS_PLAYER:\n      return null;\n    default:\n      return state;\n  }\n}\n","import {\n  ADD_USER_MOVE,\n  CHANGE_MODE,\n  TWO_PLAYER_CHANGE_TURN,\n  VERSUS_COMPUTER,\n} from \"../actions/actionTypes\";\n\nexport function moveHistoryReducer(state = [], action) {\n  switch (action.type) {\n    case ADD_USER_MOVE:\n      let newState = state.slice();\n      newState.push(action.move);\n      return newState;\n    case TWO_PLAYER_CHANGE_TURN:\n    case VERSUS_COMPUTER:\n    case CHANGE_MODE:\n      return [];\n    default:\n      return state;\n  }\n}\n","import {\n  SET_SECRET_CODE,\n  VERSUS_COMPUTER,\n  START_PLAYER,\n} from \"../actions/actionTypes\";\n\nexport function correctCodeReducer(state = null, action) {\n  switch (action.type) {\n    case VERSUS_COMPUTER:\n      return null;\n    case SET_SECRET_CODE:\n    case START_PLAYER:\n      return action.code_info;\n    default:\n      return state;\n  }\n}\n","import {\n  GAME_WON,\n  GAME_LOST,\n  VERSUS_COMPUTER,\n  START_PLAYER,\n  ADD_ANOTHER_TURN,\n} from \"../actions/actionTypes\";\n\nexport function gameStatusReducer(state = false, action) {\n  switch (action.type) {\n    case VERSUS_COMPUTER:\n    case START_PLAYER:\n    case ADD_ANOTHER_TURN:\n      return true;\n    case GAME_WON:\n    case GAME_LOST:\n      return false;\n\n    default:\n      return state;\n  }\n}\n","import {\n  GAME_WON,\n  GAME_LOST,\n  VERSUS_PLAYER,\n  VERSUS_COMPUTER,\n  CHANGE_MODE,\n  ADD_ANOTHER_TURN,\n} from \"../actions/actionTypes\";\n\nexport function isPlayerWinnerReducer(state = null, action) {\n  switch (action.type) {\n    case GAME_WON:\n      return true;\n    case GAME_LOST:\n      return false;\n    case VERSUS_PLAYER:\n    case VERSUS_COMPUTER:\n    case ADD_ANOTHER_TURN:\n    case CHANGE_MODE:\n      return null;\n    default:\n      return state;\n  }\n}\n","import { CORRECT_GUESS, NEW_GAME } from \"../actions/actionTypes\";\n\nexport function scoreReducer(state = 0, action) {\n  switch (action.type) {\n    case CORRECT_GUESS:\n      return state + 1;\n    case NEW_GAME:\n      return 0;\n    default:\n      return state;\n  }\n}\n","import { CLASSIC_MODE, TIMED_MODE } from \"../actions/actionTypes\";\n\nexport function gameTypeReducer(state = null, action) {\n  switch (action.type) {\n    case TIMED_MODE:\n      return TIMED_MODE;\n    case CLASSIC_MODE:\n      return CLASSIC_MODE;\n    default:\n      return state;\n  }\n}\n","import {\n  ONE_PLAYER,\n  TWO_PLAYER,\n  TWO_PLAYER_CHANGE_TURN,\n  TWO_PLAYER_UPDATE_SCORE,\n} from \"../actions/actionTypes\";\n\nexport function versusModeReducer(state = null, action) {\n  switch (action.type) {\n    case TWO_PLAYER:\n      return { playerNumTurn: 1, player1: 0, player2: 0 };\n    case TWO_PLAYER_UPDATE_SCORE:\n      let { playerNum, playerScore } = action;\n      let nextState = Object.assign({}, state);\n      if (playerScore === \"add\") {\n        //score updates in timed mode\n        nextState[playerNum]++;\n      } else {\n        //score is set in classic mode\n        nextState[playerNum] = playerScore;\n      }\n      return nextState;\n    case TWO_PLAYER_CHANGE_TURN:\n      let nextTurn = state.playerNumTurn + 1;\n      return Object.assign({}, state, { playerNumTurn: nextTurn });\n\n    case ONE_PLAYER:\n      return false;\n    default:\n      return state;\n  }\n}\n","import { SET_SCREEN_CHANGE, START_TURN } from \"../actions/actionTypes\";\n\nexport function turnChangeReducer(state = false, action) {\n  switch (action.type) {\n    case START_TURN:\n      return false;\n    case SET_SCREEN_CHANGE:\n      return true;\n    default:\n      return state;\n  }\n}\n","export function checkUserGuess(userAnswer, correctAnswer, countOfEachNum) {\n  /*\n  [0,4,0,4,0,4] correct\n  [4,4,4,4,4,4] guess\n  at i === 0 \n  by i == 3, count[2] === 0\n  white = 2\n  red = 1\n\n\n  */\n  //alternatively consider copying countOfEachNum, removing from it as we iterate userAnswer,\n  //if we hit a perfect match and countOfEachNum < 0, we remove white and add to red\n  let clone = Object.assign({}, countOfEachNum);\n  let red = 0;\n  let white = 0;\n  for (let i = 0; i < userAnswer.length; i++) {\n    let user = userAnswer[i];\n    let correct = correctAnswer[i];\n    if (user === correct) {\n      red++;\n      if (clone[user] <= 0) {\n        white--;\n      }\n      clone[user]--;\n    } else {\n      if (clone[user] > 0) {\n        white++;\n        clone[user]--;\n      }\n    }\n  }\n  return { red: red, white: white };\n}\n\nexport function handleHintGivenLogic(correct, previousGivenHints) {\n  //previousGiven hints === hash, others === array\n\n  for (let i = 0; i < correct.length; i++) {\n    if (previousGivenHints[i] === undefined) {\n      return [i, correct[i]];\n    }\n  }\n}\n\nexport function preprocessSubmit(state) {\n  let { correctCode, userBoard } = state;\n  let userBoardValues = userBoard.board.slice();\n  let { code, countOfEachNum } = correctCode;\n  let checkAnswer = checkUserGuess(userBoardValues, code, countOfEachNum);\n  let { red, white } = checkAnswer;\n  let previousMove = {\n    moves: userBoardValues,\n    redPegs: red,\n    whitePegs: white,\n  };\n  let usePhrase = Math.floor(Math.random() * 3);\n  previousMove[\"randomPhrase\"] = usePhrase;\n\n  return { previousMove, state };\n}\n","import {\n  ADD_ANOTHER_TURN,\n  NEW_GAME,\n  CORRECT_GUESS,\n  SET_SECRET_CODE,\n  CODE_SIZE_SELECTED,\n  USER_INPUT,\n  SELECT_INPUT_SPOT,\n  ADD_USER_MOVE,\n  VERSUS_COMPUTER,\n  VERSUS_PLAYER,\n  GAME_WON,\n  GAME_LOST,\n  HINT_GIVEN,\n  ONE_PLAYER,\n  TWO_PLAYER,\n  TWO_PLAYER_CHANGE_TURN,\n  TWO_PLAYER_UPDATE_SCORE,\n  START_PLAYER,\n} from \"./actionTypes\";\n\nimport { handleHintGivenLogic } from \"../gameLogic/gameLogicFunctions\";\n\nexport function setUserCreatedCode(userBoard) {\n  let codeCreated = userBoard.board.slice();\n  let numCount = codeCreated.reduce((acc, num) => {\n    acc[num] = acc[num] + 1 || 1;\n    return acc;\n  }, {});\n\n  return {\n    type: START_PLAYER,\n    code_info: { code: codeCreated, countOfEachNum: numCount },\n    codeLength: codeCreated.length,\n  };\n}\n\nexport function setCode(code_info) {\n  return { type: SET_SECRET_CODE, code_info: code_info };\n}\n\nexport function codeSizeSelected(size) {\n  return { type: CODE_SIZE_SELECTED, size: size };\n}\n\nexport function userInput(selectedCodeIndex, codeInput) {\n  return {\n    type: USER_INPUT,\n    selectedCodeIndex: selectedCodeIndex,\n    codeInput: codeInput,\n  };\n}\n\nexport function selectInputSpot(index) {\n  return { type: SELECT_INPUT_SPOT, index: index };\n}\n\nexport function actionUserMoveToHistory(move) {\n  return { type: ADD_USER_MOVE, move: move };\n}\n\nexport function versusPlayer(options) {\n  let intergize = options.map((x) => parseInt(x));\n  let [codeLength, codeOptions, turnsAllowed, timeAllowed] = intergize;\n  return {\n    type: VERSUS_PLAYER,\n    codeLength,\n    codeOptions,\n    turnsAllowed,\n    timeAllowed,\n  };\n}\n\nexport function versusComputer(options) {\n  let intergize = options.map((x) => parseInt(x));\n  let [codeLength, codeOptions, turnsAllowed, timeAllowed] = intergize;\n  return {\n    type: VERSUS_COMPUTER,\n    codeLength,\n    codeOptions,\n    turnsAllowed,\n    timeAllowed,\n  };\n}\n\nexport function gameWon() {\n  return { type: GAME_WON };\n}\n\nexport function gameLost() {\n  return { type: GAME_LOST };\n}\n\nexport function addExtraTurn(turns = 1) {\n  return { type: ADD_ANOTHER_TURN, turns };\n}\n\nexport function updateScore() {\n  return { type: CORRECT_GUESS };\n}\n\nexport function newGame() {\n  return { type: NEW_GAME };\n}\n\nexport function hintRequested(hints, code) {\n  let [index, value] = handleHintGivenLogic(code, hints);\n  return { type: HINT_GIVEN, hint: { index: index, value: value } };\n}\n\nexport function setOnePlayer() {\n  return { type: ONE_PLAYER };\n}\n\nexport function setTwoPlayer() {\n  return { type: TWO_PLAYER };\n}\n\nexport function changeTurn() {\n  return { type: TWO_PLAYER_CHANGE_TURN };\n}\n\nexport function twoPlayerAddScore(playerNum, playerScore) {\n  return {\n    type: TWO_PLAYER_UPDATE_SCORE,\n    playerNum: `player${playerNum}`,\n    playerScore: playerScore,\n  };\n}\n","import store from \"../createStore\";\nimport { setCode } from \"./actions\";\n\n//trigger this as middleware\nexport async function getRandomNumbers(size, range) {\n  let response = await fetch(\n    `https://www.random.org/integers/?num=${size}&min=1&max=${range}&col=1&base=10&format=plain&rnd=new`\n  );\n\n  if (response.status === 200) {\n    //response comes as plain text, not JSON.\n    console.log(\"Code successfully retreieved\");\n    let receivedString = await response.text();\n    let numArray = [];\n    let countOfEachNum = {};\n    for (let i = 0; i < receivedString.length; i++) {\n      let currentNum = receivedString[i];\n      let stringToInt = parseInt(currentNum);\n      if (!isNaN(stringToInt)) {\n        //avoid line breaks\n        numArray.push(stringToInt);\n        countOfEachNum[stringToInt] = countOfEachNum[stringToInt] + 1 || 1;\n      }\n    }\n    store.dispatch(setCode({ code: numArray, countOfEachNum: countOfEachNum }));\n  } else {\n    console.log(\"Unable to retrieve code, generating with Javascript Random\");\n    let newCode = [];\n    let countNums = {};\n    for (let i = 0; i < size; i++) {\n      let randNum = Math.floor(Math.random() * range);\n      newCode.push(randNum);\n      countNums[randNum] = countNums[randNum] || 1;\n    }\n    store.dispatch(setCode({ code: newCode, countOfEachNum: countNums }));\n    throw new Error(response.status);\n  }\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport { rootReducer } from \"./reducers/rootReducer\";\nimport { triggerAPICall } from \"./middlewares/getCodeFromApi\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nlet middlewares = [triggerAPICall, thunk];\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;\n","import { getRandomNumbers } from \"../actions/retrieveApi\";\nimport { VERSUS_COMPUTER } from \"../actions/actionTypes\";\n\nexport function triggerAPICall() {\n  return function wrap(next) {\n    return async function handleAction(action) {\n      let { type, codeLength, codeOptions } = action;\n      switch (type) {\n        case VERSUS_COMPUTER:\n          getRandomNumbers(codeLength, codeOptions);\n          break;\n        default:\n          break;\n      }\n\n      return next(action);\n    };\n  };\n}\n","import React, { useState } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function SubmitButton(props) {\n  const { numbersGuessed, submit, codeLength } = props;\n  let [clickCount, clickAction] = useState(0);\n  let handleClick = () => {\n    clickAction(clickCount + 1);\n    if (clickCount === 1) {\n      alert(\"Guess Incomplete\");\n    }\n    if (clickCount === 4) {\n      alert(\n        `Please completely fill out your guess before hitting the submit button. It should be ${codeLength} characters long.`\n      );\n    }\n\n    if (clickCount === 7) {\n      alert(\n        `Please enter ${codeLength} characters . This is your second to last warning.`\n      );\n    }\n\n    if (clickCount === 10) {\n      alert(\"Don't make me do this.\");\n    }\n\n    if (clickCount === 13) {\n    }\n    return null;\n  };\n  if (numbersGuessed >= codeLength) {\n    handleClick = submit;\n  }\n  return (\n    <button onClick={handleClick} className={\"game_options\"}>\n      Submit\n    </button>\n  );\n}\n\nSubmitButton.propTypes = {\n  numbersGuessed: PropTypes.number,\n  submit: PropTypes.func,\n  codeLength: PropTypes.number,\n};\n","import { connect } from \"react-redux\";\nimport { setUserCreatedCode } from \"../actions/actions\";\nimport { SubmitButton } from \"../views/buttons/SubmitButton\";\n\nfunction mapStateToProps(state) {\n  return {\n    numbersGuessed: state.userBoard?.numbersGuessed,\n    codeLength: state.advancedOptions?.codeLength,\n    userBoard: state.userBoard,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setPlayerCode: (board) => {\n      console.log(board);\n      dispatch(setUserCreatedCode(board));\n    },\n  };\n}\n\nfunction mergeProps(mapStateToProps, mapDispatchToProps) {\n  let { userBoard, numbersGuessed, codeLength } = mapStateToProps;\n  let { setPlayerCode } = mapDispatchToProps;\n  return {\n    numbersGuessed,\n    codeLength,\n    submit: () => {\n      setPlayerCode(userBoard);\n    },\n  };\n}\n\nexport const CreateOwnCodeSubmitContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(SubmitButton);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst CodeOptionButtons = styled.button`\n  height: 6vw;\n  width: 6vw;\n  min-width: 25px;\n  min-height: 25px;\n  background-color: ${(props) => props.color};\n`;\nexport function CodeOptions(props) {\n  let { userSelected, inputChoiceInto, gameSize, pegColors } = props;\n  let result = [];\n  for (let i = 1; i <= gameSize; i++) {\n    result.push(\n      <CodeOptionButtons\n        onClick={\n          userSelected !== null ? () => inputChoiceInto(userSelected, i) : null\n        }\n        color={pegColors[i]}\n        key={`code options ${i}`}\n      >\n        {i}\n      </CodeOptionButtons>\n    );\n  }\n  return result;\n}\n\nCodeOptions.propTypes = {\n  userSelected: PropTypes.number,\n  inputChoiceInto: PropTypes.func,\n  gameSize: PropTypes.number,\n  pegColors: PropTypes.object,\n};\n","import { connect } from \"react-redux\";\nimport { CodeOptions } from \"../views/buttons/CodeOptions\";\nimport { userInput } from \"../actions/actions\";\n\nfunction mapStateToProps(state) {\n  return {\n    userSelected: state.userSelected,\n    gameSize: state.advancedOptions?.codeOptions,\n    pegColors: state.pegColors,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    inputChoiceInto: (index, value) => {\n      dispatch(userInput(index, value));\n    },\n  };\n}\n\nexport const CodeOptionsContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CodeOptions);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport styled from \"styled-components\";\nimport { CodeOptionsContainer } from \"../../containers/CodeOptionsContainer\";\nlet UserBoardButton = styled.button`\n  height: 9vw;\n  width: 9vw;\n  background-color: ${(props) => props.color};\n  font-size: 2vw;\n  min-width: 40px;\n  min-height: 40px;\n  border: ${(props) =>\n    props.hasHint\n      ? \"red solid 4px\"\n      : props.highlight\n      ? \"green 5px solid\"\n      : null};\n`;\n\nexport function UserBoard(props) {\n  let result = [];\n  let { userBoard, changeInputSpot, userSelected, hints, pegColors } = props;\n\n  for (let i = 0; i < userBoard.length; i++) {\n    let hasHint = false;\n    if (hints?.[i]) {\n      hasHint = true;\n    }\n    result.push(\n      <UserBoardButton\n        boardLength={userBoard.length}\n        highlight={userSelected === i}\n        key={`userboard index ${i}`}\n        onClick={hasHint ? null : () => changeInputSpot(i)}\n        hasHint={hasHint}\n        color={userBoard[i] ? pegColors[userBoard[i]] : \"white\"}\n      >\n        {userBoard[i] || `Index ${i + 1}`}\n      </UserBoardButton>\n    );\n  }\n  let showOptions =\n    userSelected !== null ? (\n      <section className={\"code_options\"}>\n        <h1>Code Options</h1>\n        <CodeOptionsContainer />\n      </section>\n    ) : null;\n  return (\n    <section className={\"user_interaction\"}>\n      <section className={\"code_select\"}>{result}</section>\n      {showOptions}\n    </section>\n  );\n}\n\nUserBoard.propTypes = {\n  userBoard: PropTypes.array,\n  changeInputSpot: PropTypes.func,\n  userSelected: PropTypes.number,\n  hints: PropTypes.object,\n  pegColors: PropTypes.object,\n};\n","import { connect } from \"react-redux\";\nimport { selectInputSpot } from \"../actions/actions\";\nimport { UserBoard } from \"../views/buttons/UserBoard\";\n\nfunction mapStateToProps(state) {\n  return {\n    userBoard: state.userBoard?.board,\n    userSelected: state.userSelected,\n    hints: state.userBoard?.hints,\n    pegColors: state.pegColors,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeInputSpot: (index) => dispatch(selectInputSpot(index)),\n  };\n}\n\nexport const UserBoardContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserBoard);\n","import React from \"react\";\nimport { CreateOwnCodeSubmitContainer } from \"../containers/CreateOwnCodeSubmitContainer\";\nimport { UserBoardContainer } from \"../containers/UserBoardContainer\";\n\nexport function PlayerCreateCodeView(props) {\n  return (\n    <section>\n      <h1>Design Code</h1>\n      <UserBoardContainer />\n      <CreateOwnCodeSubmitContainer />\n    </section>\n  );\n}\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport styled from \"styled-components\";\n\nfunction sentenceOne(red, white) {\n  return `Hey, your last code had ${red} exactly right and ${white} that were in the wrong place. Almost there!`;\n}\n\nfunction sentenceTwo(red, white) {\n  return `Above code had ${red} correct, ${white} were spotted else where in the code`;\n}\n\nfunction sentenceThree(red, white) {\n  return `OMG YOU HAD ${red} PERFECTS, ON THE SPOT, ABSOLUTELY PERFECT AND ${white}... almost perfects. Try again friend.`;\n}\n\nfunction randomPhraseGenerator(red, white, correct = false, random) {\n  let store = [sentenceOne, sentenceTwo, sentenceThree];\n  if (correct) {\n    return `Well done! That was exactly it!`;\n  }\n  return store[random](red, white);\n}\n\nconst PegDisplay = styled.section`\n  background-color: ${(props) => props.color};\n  height: 25px;\n  width: 25px;\n  display: inline-block;\n  border: 1px black solid;\n`;\n\nexport function MoveHistory(props) {\n  let { previousMoves, pegColors } = props;\n  let display;\n  if (previousMoves.length > 0) {\n    let history = [];\n    for (let i = previousMoves.length - 1; i >= 0; i--) {\n      let {\n        moves,\n        redPegs,\n        whitePegs,\n        correctGuess,\n        randomPhrase,\n      } = previousMoves[i];\n      let pegsDisplay = moves.map((move, index) => {\n        return <PegDisplay key={`peg ${index}`} color={pegColors[move]} />;\n      });\n\n      history.push(\n        <section key={`move history${i}`}>\n          <h3>Move {moves.join(\" | \")}</h3>\n          <p key={`move history ${i}`}></p>\n          {pegsDisplay}\n          <br />\n          {randomPhraseGenerator(\n            redPegs,\n            whitePegs,\n            correctGuess,\n            randomPhrase\n          )}\n        </section>\n      );\n    }\n    display = history;\n  } else {\n    display = <p>Here is a brand new secret code! Start guessing!</p>;\n  }\n  return (\n    <section id={\"move_history_container\"}>\n      <section className={\"move_history_title\"}>\n        <h1>Move History</h1>\n      </section>\n      <section className={\"history_display\"}>{display}</section>\n    </section>\n  );\n}\n\nMoveHistory.propTypes = {\n  previousMoves: PropTypes.array,\n  pegColors: PropTypes.object,\n};\n","import { connect } from \"react-redux\";\nimport { MoveHistory } from \"../views/MoveHistory\";\n\nfunction mapStateToProps(state) {\n  return {\n    previousMoves: state.moveHistory,\n    pegColors: state.pegColors,\n  };\n}\n\nexport const MoveHistoryContainer = connect(mapStateToProps)(MoveHistory);\n","import { connect } from \"react-redux\";\nimport { ScoreView } from \"../views/ScoreView\";\n\nfunction mapStateToProps(state) {\n  return {\n    score: state.score,\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nexport const ScoreContainer = connect(mapStateToProps)(ScoreView);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function ScoreView(props) {\n  let { score, isTwoPlayer } = props;\n  let showScore = score;\n  if (isTwoPlayer) {\n    showScore =\n      isTwoPlayer.playerNumTurn === 1\n        ? isTwoPlayer.player1\n        : isTwoPlayer.player2;\n  }\n  return (\n    <p>\n      Score:{\" \"}\n      <span key={showScore} className={\"score_view\"}>\n        {showScore}\n      </span>\n    </p>\n  );\n}\n\nScoreView.propTypes = {\n  score: PropTypes.number,\n  isTwoPlayer: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n};\n","import { connect } from \"react-redux\";\nimport {\n  versusPlayer,\n  versusComputer,\n  newGame,\n  setTwoPlayer,\n} from \"../actions/actions\";\nimport { SET_SCREEN_CHANGE } from \"../actions/actionTypes\";\nimport { AdvancedOptionsView } from \"../views/AdvancedOptionsView\";\n\nfunction mapStateToProps(state) {\n  return {\n    gameType: state.gameType,\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    startComputer: (arg) => {\n      dispatch(newGame());\n      dispatch(versusComputer(arg));\n      dispatch({ type: SET_SCREEN_CHANGE });\n    },\n    startPlayer: (arg) => {\n      dispatch(newGame());\n      dispatch(versusPlayer(arg));\n    },\n    startTwoPlayer: () => {\n      dispatch(setTwoPlayer());\n    },\n  };\n}\n\nfunction mergeProps(mapStateToProps, mapDispatchToProps) {\n  let { gameType, isTwoPlayer } = mapStateToProps;\n  let { startComputer, startPlayer, startTwoPlayer } = mapDispatchToProps;\n  return {\n    gameType,\n    isTwoPlayer,\n    vsComputer: (args) => {\n      startComputer(args);\n      if (isTwoPlayer) {\n        startTwoPlayer();\n      }\n    },\n    vsPlayer: (args) => {\n      startPlayer(args);\n    },\n  };\n}\n\nexport const AdvancedOptionsContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(AdvancedOptionsView);\n","import React, { useState } from \"react\";\nimport { CLASSIC_MODE } from \"../actions/actionTypes\";\nimport { PropTypes } from \"prop-types\";\n\nexport function AdvancedOptionsView(props) {\n  let { vsPlayer, vsComputer, gameType, isTwoPlayer } = props;\n  let [codeLength, lengthChange] = useState(4);\n  let [optionsLength, optionsChange] = useState(8);\n  let [turnsLength, turnsChange] = useState(10);\n  let [timeAllowed, changeTime] = useState(4);\n  let gameTypeInputs =\n    gameType === CLASSIC_MODE ? (\n      <>\n        <section>\n          <label>Number Of Turns</label>\n          <input\n            onChange={(event) => turnsChange(event.target.value)}\n            type=\"range\"\n            className=\"slider\"\n            min=\"4\"\n            max=\"20\"\n            value={turnsLength}\n            id=\"turns_length\"\n          ></input>\n          <input\n            onChange={(event) => turnsChange(event.target.value)}\n            type=\"number\"\n            value={turnsLength}\n            min=\"4\"\n            max=\"20\"\n          ></input>\n        </section>\n        <section>\n          <button\n            onClick={() =>\n              vsComputer([codeLength, optionsLength, turnsLength, timeAllowed])\n            }\n          >\n            Play Versus Computer\n          </button>\n          {isTwoPlayer ? null : (\n            <button\n              onClick={() =>\n                vsPlayer([codeLength, optionsLength, turnsLength, timeAllowed])\n              }\n            >\n              Play Versus Player\n            </button>\n          )}\n        </section>\n      </>\n    ) : (\n      <>\n        <section>\n          <label>Time Allowed</label>\n          <input\n            onChange={(event) => changeTime(event.target.value)}\n            type=\"range\"\n            className=\"slider\"\n            min=\"1\"\n            max=\"10\"\n            value={timeAllowed}\n            id=\"turns_length\"\n          ></input>\n          <input\n            onChange={(event) => changeTime(event.target.value)}\n            type=\"number\"\n            value={timeAllowed}\n            min=\"1\"\n            max=\"10\"\n          ></input>\n        </section>\n        <button\n          onClick={() =>\n            vsComputer([codeLength, optionsLength, turnsLength, timeAllowed])\n          }\n        >\n          Play\n        </button>\n      </>\n    );\n  return (\n    <section>\n      <h3>Select Difficulty</h3>\n      <section>\n        <label>Code Length</label>\n        <input\n          onChange={(event) => lengthChange(event.target.value)}\n          type=\"range\"\n          className=\"slider\"\n          min=\"4\"\n          max=\"20\"\n          value={codeLength}\n          id=\"code_length\"\n        ></input>\n        <input\n          onChange={(event) => lengthChange(event.target.value)}\n          type=\"number\"\n          value={codeLength}\n          min=\"4\"\n          max=\"20\"\n        ></input>\n      </section>\n      <section>\n        <label>Number Of Options</label>\n        <input\n          onChange={(event) => optionsChange(event.target.value)}\n          type=\"range\"\n          className=\"slider\"\n          min=\"7\"\n          max=\"50\"\n          value={optionsLength}\n          id=\"options_length\"\n        ></input>\n        <input\n          onChange={(event) => optionsChange(event.target.value)}\n          type=\"number\"\n          value={optionsLength}\n          min=\"7\"\n          max=\"50\"\n        ></input>\n      </section>\n      {gameTypeInputs}\n    </section>\n  );\n}\n\nAdvancedOptionsView.propTypes = {\n  vsPlayer: PropTypes.func,\n  vsComputer: PropTypes.func,\n  gameType: PropTypes.string,\n  isTwoPlayer: PropTypes.object,\n};\n","import { connect } from \"react-redux\";\nimport { CHANGE_MODE } from \"../actions/actionTypes\";\nimport { ChangeModeButton } from \"../views/buttons/ChangeModeButton\";\n\nfunction mapStateToProps(state) {\n  return {\n    gameType: state.gameType,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    switchModes: (mode) => {\n      dispatch({ type: CHANGE_MODE });\n      dispatch({ type: mode });\n    },\n  };\n}\n\nexport const ChangeModeContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChangeModeButton);\n","import React from \"react\";\nimport { CLASSIC_MODE, TIMED_MODE } from \"../../actions/actionTypes\";\nimport { PropTypes } from \"prop-types\";\n\nexport function ChangeModeButton(props) {\n  let { switchModes, gameType } = props;\n  let newMode;\n  if (gameType === TIMED_MODE) {\n    newMode = CLASSIC_MODE;\n  } else {\n    newMode = TIMED_MODE;\n  }\n  return (\n    <button onClick={() => switchModes(newMode)} className={\"game_options\"}>\n      Change Mode\n    </button>\n  );\n}\n\nChangeModeButton.propTypes = {\n  switchModes: PropTypes.func,\n  gameType: PropTypes.string,\n};\n","import { connect } from \"react-redux\";\nimport { ModeDisplayView } from \"../views/ModeDisplay\";\n\nfunction mapStateToProps(state) {\n  return {\n    gameType: state.gameType,\n  };\n}\n\nexport const ModeDisplayContainer = connect(mapStateToProps)(ModeDisplayView);\n","import React from \"react\";\nimport { TIMED_MODE } from \"../actions/actionTypes\";\nimport { PropTypes } from \"prop-types\";\n\nexport function ModeDisplayView(props) {\n  let { gameType } = props;\n  return gameType === TIMED_MODE ? <h3>Timed Mode</h3> : <h3>Classic Mode</h3>;\n}\n\nModeDisplayView.propTypes = {\n  gameType: PropTypes.string,\n};\n","import { connect } from \"react-redux\";\nimport { setTwoPlayer, versusComputer, versusPlayer } from \"../actions/actions\";\nimport { GameOptionsView } from \"../views/buttons/GameOptionsView\";\nimport { SET_SCREEN_CHANGE } from \"../actions/actionTypes\";\n\nfunction mapStateToProps(state) {\n  return {\n    winner: state.winner,\n    isTwoPlayer: state.isTwoPlayer,\n    advancedOptions: state.advancedOptions,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    quickPlay: () => {\n      dispatch(versusComputer([4, 8, 10, 4]));\n      dispatch({ type: SET_SCREEN_CHANGE });\n    },\n    playAgain: (options) => {\n      let {\n        computer,\n        codeLength,\n        codeOptions,\n        turnsAllowed,\n        timeAllowed,\n      } = options.advancedOptions;\n      if (options.isTwoPlayer) {\n        dispatch({ type: SET_SCREEN_CHANGE });\n        dispatch(setTwoPlayer());\n      }\n      if (computer) {\n        dispatch(\n          versusComputer([codeLength, codeOptions, turnsAllowed, timeAllowed])\n        );\n      } else {\n        dispatch(\n          versusPlayer([codeLength, codeOptions, turnsAllowed, timeAllowed])\n        );\n      }\n    },\n  };\n}\n\nfunction mergeProps(mapStateToProps, mapDispatchToProps) {\n  let { winner, isTwoPlayer, advancedOptions } = mapStateToProps;\n  let { quickPlay, playAgain } = mapDispatchToProps;\n  return {\n    winner: winner,\n    quickPlay: () => quickPlay(),\n    playAgain: () => {\n      playAgain({ isTwoPlayer, advancedOptions });\n    },\n  };\n}\nexport const GameOptionsContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(GameOptionsView);\n","import React, { useState } from \"react\";\nimport { AdvancedOptionsContainer } from \"../../containers/AdvancedOptionsContainer\";\nimport { PropTypes } from \"prop-types\";\nimport { ChangeModeContainer } from \"../../containers/ChangeModeContainer\";\nimport { ModeDisplayContainer } from \"../../containers/ModeDisplayContainer\";\n\nexport function GameOptionsView(props) {\n  let { quickPlay, playAgain, winner } = props;\n  let [advancedOptions, toggleAdvanceOptions] = useState(false);\n\n  let selectDifficulty = advancedOptions ? <AdvancedOptionsContainer /> : null;\n  let [modeDisplay, gamePlay, userChoice, clickHandler] =\n    winner === null\n      ? [\n          // eslint-disable-next-line react/jsx-key\n          <ModeDisplayContainer />,\n          // eslint-disable-next-line react/jsx-key\n          \" Quick Play\",\n          \"Advanced Options\",\n          quickPlay,\n        ]\n      : [\n          null,\n          // eslint-disable-next-line react/jsx-key\n          \"RUN IT BACK\",\n          \"Change Settings\",\n          playAgain,\n        ];\n\n  return (\n    <section className={\"game_select_container\"}>\n      {modeDisplay}\n      <button onClick={clickHandler} className={\"game_options\"}>\n        {gamePlay}\n      </button>\n      <button\n        onClick={() => toggleAdvanceOptions(!advancedOptions)}\n        className={\"game_options\"}\n      >\n        {userChoice}\n      </button>\n      <ChangeModeContainer />\n      {selectDifficulty}\n    </section>\n  );\n}\n\nGameOptionsView.propTypes = {\n  quickPlay: PropTypes.func,\n  playAgain: PropTypes.func,\n  winner: PropTypes.bool,\n  gameType: PropTypes.string,\n};\n","import { connect } from \"react-redux\";\nimport { addExtraTurn } from \"../actions/actions\";\nimport { GameOverView } from \"../views/GameOverView\";\n\nfunction mapStateToProps(state) {\n  return {\n    winner: state.winner,\n    showCode: state.correctCode?.code,\n    gameType: state.gameType,\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nfunction mapDispatchToState(dispatch) {\n  return {\n    oneMoreChance: () => dispatch(addExtraTurn()),\n  };\n}\n\nexport const GameOverContainer = connect(\n  mapStateToProps,\n  mapDispatchToState\n)(GameOverView);\n","import React, { useState } from \"react\";\nimport { CLASSIC_MODE, TIMED_MODE } from \"../actions/actionTypes\";\nimport { MoveHistoryContainer } from \"../containers/MoveHistoryContainer\";\nimport { ScoreContainer } from \"../containers/ScoreContainer\";\nimport { PropTypes } from \"prop-types\";\nimport { GameOptionsContainer } from \"../containers/GameOptionsContainer\";\n\nexport function GameOverView(props) {\n  let { winner, showCode, oneMoreChance, gameType, isTwoPlayer } = props;\n  let [newGame, toggleNewGame] = useState(false);\n  let [isAnswerSeen, showAnswer] = useState(false);\n  let playAgainButton = newGame ? null : (\n    <button onClick={() => toggleNewGame(!newGame)}>Play Again?</button>\n  );\n  let gameSelect = newGame ? <GameOptionsContainer /> : null;\n  if (isTwoPlayer) {\n    let score1 = isTwoPlayer.player1;\n    let score2 = isTwoPlayer.player2;\n    let moveCounts = (\n      <>\n        <p>Player 1: {score1} </p>\n        <p>Player2: {score2} </p>\n      </>\n    );\n    if (score1 === score2) {\n      return (\n        <section className={\"intro_screen\"}>\n          <h1>DRAW!</h1>\n          <p>Yall should play again</p>\n          {moveCounts}\n\n          {playAgainButton}\n          {gameSelect}\n        </section>\n      );\n    }\n    let winner, loser, moves;\n    if (gameType === TIMED_MODE) {\n      [winner, loser, moves] =\n        score1 > score2\n          ? [1, 2, `getting ${score1 - score2} more correct`]\n          : [2, 1, `getting ${score2 - score1} more correct`];\n    } else {\n      [winner, loser, moves] =\n        score1 > score2\n          ? [2, 1, `${score1 - score2} moves`]\n          : [1, 2, `${score2 - score1} moves`];\n    }\n\n    return (\n      <section className={\"intro_screen\"}>\n        <h1>Congratulations: Player {winner}</h1>\n        <p>\n          You beat Player {loser} by {moves}{\" \"}\n        </p>\n        {moveCounts}\n        {playAgainButton}\n        {gameSelect}\n      </section>\n    );\n  }\n\n  if (gameType === CLASSIC_MODE) {\n    let [showAnswerButton, answer] = isAnswerSeen\n      ? // eslint-disable-next-line react/jsx-key\n        [null, <p>{showCode}</p>]\n      : // eslint-disable-next-line react/jsx-key\n        [null, <button onClick={() => showAnswer(true)}>Show Answer</button>];\n    let isWinner = winner ? (\n      <h1>You win :(</h1>\n    ) : (\n      <>\n        <h1>You lose :)</h1>\n        <button onClick={oneMoreChance}>One More Chance</button>\n      </>\n    );\n    return (\n      <>\n        <section className={\"gameover_view\"}>\n          <h1>Game Over!</h1>\n          <h3>You Played Classic Mode</h3>\n          {isWinner}\n          <MoveHistoryContainer />\n          {answer}\n          {showAnswerButton}\n          {playAgainButton}\n          {gameSelect}\n        </section>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <section className={\"gameover_view\"}>\n          <h1>Game Over!</h1>\n          <h3>You Played Timed Mode</h3>\n          <ScoreContainer />\n          <MoveHistoryContainer />\n          {playAgainButton}\n          {gameSelect}\n        </section>\n      </>\n    );\n  }\n}\n\nGameOverView.propTypes = {\n  winner: PropTypes.bool,\n  showCode: PropTypes.array,\n  oneMoreChance: PropTypes.func,\n  gameType: PropTypes.string,\n  switchModes: PropTypes.func,\n};\n","import { connect } from \"react-redux\";\nimport { setOnePlayer, setTwoPlayer } from \"../actions/actions\";\nimport { VersusModeButton } from \"../views/buttons/VersusModeButton\";\n\nfunction mapDispatchtoState(dispatch) {\n  return {\n    onePlayer: () => dispatch(setOnePlayer()),\n    twoPlayer: () => dispatch(setTwoPlayer()),\n  };\n}\n\nexport const VersusModeContainer = connect(\n  null,\n  mapDispatchtoState\n)(VersusModeButton);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function VersusModeButton(props) {\n  let { onePlayer, twoPlayer } = props;\n  return (\n    <section className={\"versus_mode_seletor\"}>\n      <button onClick={onePlayer}>One Player</button>\n      <button onClick={twoPlayer}>Two Player</button>\n    </section>\n  );\n}\n\nVersusModeButton.propTypes = {\n  onePlayer: PropTypes.func,\n  twoPlayer: PropTypes.func,\n};\n","import { connect } from \"react-redux\";\nimport { hintRequested } from \"../actions/actions\";\nimport { HintButton } from \"../views/buttons/HintButton\";\n\nfunction mapStateToProps(state) {\n  return {\n    hintCount: state.userBoard?.hintCount,\n    hints: state.userBoard?.hints,\n    correctCode: state.correctCode?.code,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getHint: (hints, code) => {\n      dispatch(hintRequested(hints, code));\n    },\n  };\n}\n\nfunction mergeProps(mapStateToProps, mapDispatchToProps) {\n  let { hintCount, correctCode, hints } = mapStateToProps;\n  let { getHint } = mapDispatchToProps;\n  return {\n    hintCount,\n    correctCode,\n    requestHint: () => {\n      getHint(hints, correctCode);\n    },\n  };\n}\n\nexport const HintButtonContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(HintButton);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function HintButton(props) {\n  //since set code is async, user can hit the the hint button repeatly and break it in timed mode\n  //will only display when correctCode is set.\n  let { requestHint, hintCount, correctCode } = props;\n  return correctCode && hintCount < correctCode.length - 2 ? (\n    <button onClick={() => requestHint()}>Request Hint</button>\n  ) : null;\n}\n\nHintButton.propTypes = {\n  requestHint: PropTypes.func,\n  hintCount: PropTypes.number,\n  correctCode: PropTypes.array,\n};\n","import { connect } from \"react-redux\";\nimport { START_TURN } from \"../actions/actionTypes\";\nimport { ChangeTurnScreen } from \"../views/ChangeTurnScreen\";\n\nfunction mapStateToProps(state) {\n  return {\n    isTwoPlayer: state.isTwoPlayer,\n    turnChange: state.turnChange,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    startTurn: () => dispatch({ type: START_TURN }),\n  };\n}\n\nexport const ChangeTurnContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChangeTurnScreen);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function ChangeTurnScreen(props) {\n  let { isTwoPlayer, startTurn } = props;\n  return (\n    <section className={\"intro_screen\"}>\n      <button onClick={startTurn}>\n        Start Player {isTwoPlayer.playerNumTurn} Turn\n      </button>\n    </section>\n  );\n}\n\nChangeTurnScreen.propTypes = {\n  isTwoPlayer: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  turnChange: PropTypes.bool,\n  startTurn: PropTypes.func,\n};\n","import { connect } from \"react-redux\";\nimport {\n  gameWon,\n  actionUserMoveToHistory,\n  versusComputer,\n  changeTurn,\n  twoPlayerAddScore,\n  gameLost,\n} from \"../actions/actions\";\nimport { SubmitButton } from \"../views/buttons/SubmitButton\";\nimport { SET_SCREEN_CHANGE } from \"../actions/actionTypes\";\nimport { preprocessSubmit } from \"../gameLogic/gameLogicFunctions\";\n\nfunction handleSinglePlayerClassic(dispatch, { previousMove, state }) {\n  let { turnsMade, turnsAllowed } = state.advancedOptions;\n  let { redPegs, moves } = previousMove;\n  dispatch(actionUserMoveToHistory(previousMove));\n  if (redPegs === moves.length) {\n    previousMove[\"correctGuess\"] = true;\n    dispatch(gameWon());\n  } else {\n    if (turnsAllowed - turnsMade === 1) {\n      dispatch(gameLost());\n    }\n  }\n}\n\nfunction handleTwoPlayerClassic(dispatch, { previousMove, state }) {\n  let { redPegs, moves } = previousMove;\n  let { advancedOptions, isTwoPlayer } = state;\n  let {\n    codeLength,\n    codeOptions,\n    turnsAllowed,\n    timeAllowed,\n    turnsMade,\n  } = advancedOptions;\n  if (redPegs === moves.length) {\n    if (isTwoPlayer.playerNumTurn === 2) {\n      //if second player just finished => gameover to display who won\n      dispatch(twoPlayerAddScore(2, turnsMade));\n      //add last move for accurate score\n      dispatch(gameWon());\n    } else {\n      dispatch(twoPlayerAddScore(1, turnsMade));\n      dispatch(changeTurn());\n      dispatch(\n        versusComputer([\n          codeLength,\n          codeOptions,\n          turnsAllowed,\n          timeAllowed,\n          turnsMade,\n        ])\n      );\n      dispatch({ type: SET_SCREEN_CHANGE });\n    }\n  } else {\n    dispatch(actionUserMoveToHistory(previousMove));\n  }\n}\n\nfunction mapStateToProps(state) {\n  let {\n    correctCode,\n    gameType,\n    userBoard,\n    advancedOptions,\n    isTwoPlayer,\n  } = state;\n  return {\n    numbersGuessed: userBoard?.numbersGuessed,\n    codeLength: advancedOptions?.codeLength,\n    correctCode,\n    gameType,\n    userBoard,\n    advancedOptions,\n    isTwoPlayer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    handleTwoClassic: (postCheckInfo) => {\n      handleTwoPlayerClassic(dispatch, postCheckInfo);\n    },\n    handleSingleClassic: (postCheckInfo) => {\n      handleSinglePlayerClassic(dispatch, postCheckInfo);\n    },\n  };\n}\n\nfunction mergeProps(mapStateToProps, mapDispatchToProps) {\n  let { handleSingleClassic, handleTwoClassic } = mapDispatchToProps;\n  let { isTwoPlayer, numbersGuessed, codeLength } = mapStateToProps;\n  return {\n    numbersGuessed,\n    codeLength,\n    submit: () => {\n      let postCheckInfo = preprocessSubmit(mapStateToProps);\n      if (isTwoPlayer) {\n        handleTwoClassic(postCheckInfo);\n      } else {\n        handleSingleClassic(postCheckInfo);\n      }\n    },\n  };\n}\n\nexport const ClassicModeSubmit = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(SubmitButton);\n","import { connect } from \"react-redux\";\nimport { addExtraTurn } from \"../actions/actions\";\nimport { AddExtraTurnButton } from \"../views/buttons/AddExtraTurnButton\";\n\nfunction mapStateToProps(state) {\n  return {\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addExtraTurn: () => dispatch(addExtraTurn()),\n  };\n}\n\nexport const AddExtraTurnContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AddExtraTurnButton);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function AddExtraTurnButton(props) {\n  let { isTwoPlayer, addExtraTurn } = props;\n  if (isTwoPlayer) {\n    return null;\n  }\n  return (\n    <button onClick={() => addExtraTurn()} className={\"game_options\"}>\n      Add Extra Turn?\n    </button>\n  );\n}\n\nAddExtraTurnButton.propTypes = {\n  isTwoPlayer: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  addExtraTurn: PropTypes.func,\n};\n","import { connect } from \"react-redux\";\nimport {\n  actionUserMoveToHistory,\n  versusComputer,\n  updateScore,\n  twoPlayerAddScore,\n} from \"../actions/actions\";\nimport { preprocessSubmit } from \"../gameLogic/gameLogicFunctions\";\nimport { SubmitButton } from \"../views/buttons/SubmitButton\";\n\nfunction handleSinglePlayerTimed(dispatch, { previousMove, state }) {\n  let { redPegs, moves } = previousMove;\n  let {\n    codeLength,\n    codeOptions,\n    turnsAllowed,\n    timeAllowed,\n    turnsMade,\n  } = state.advancedOptions;\n  dispatch(actionUserMoveToHistory(previousMove));\n  if (redPegs === moves.length) {\n    dispatch(updateScore());\n    dispatch(\n      versusComputer([\n        codeLength,\n        codeOptions,\n        turnsAllowed,\n        timeAllowed,\n        turnsMade,\n      ])\n    );\n    previousMove[\"correctGuess\"] = true;\n  }\n}\n\nfunction handleTwoPlayerTimed(dispatch, { previousMove, state }) {\n  let { redPegs, moves } = previousMove;\n  let { advancedOptions, isTwoPlayer } = state;\n  let {\n    codeLength,\n    codeOptions,\n    turnsAllowed,\n    timeAllowed,\n    turnsMade,\n  } = advancedOptions;\n  dispatch(actionUserMoveToHistory(previousMove));\n  if (redPegs === moves.length) {\n    if (isTwoPlayer.playerNumTurn === 2) {\n      dispatch(twoPlayerAddScore(2, \"add\"));\n    } else {\n      dispatch(twoPlayerAddScore(1, \"add\"));\n    }\n    dispatch(\n      versusComputer([\n        codeLength,\n        codeOptions,\n        turnsAllowed,\n        timeAllowed,\n        turnsMade,\n      ])\n    );\n    previousMove[\"correctGuess\"] = true;\n  }\n}\n\nfunction mapStateToProps(state) {\n  let {\n    correctCode,\n    gameType,\n    userBoard,\n    advancedOptions,\n    isTwoPlayer,\n  } = state;\n  return {\n    numbersGuessed: userBoard?.numbersGuessed,\n    codeLength: advancedOptions?.codeLength,\n    correctCode,\n    gameType,\n    userBoard,\n    advancedOptions,\n    isTwoPlayer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    handleSingleTimed: (postCheckInfo) => {\n      handleSinglePlayerTimed(dispatch, postCheckInfo);\n    },\n    handleTwoTimed: (postCheckInfo) => {\n      handleTwoPlayerTimed(dispatch, postCheckInfo);\n    },\n  };\n}\n\nfunction mergeProps(mapStateToProps, mapDispatchToProps) {\n  let { handleTwoTimed, handleSingleTimed } = mapDispatchToProps;\n  let { isTwoPlayer, numbersGuessed, codeLength } = mapStateToProps;\n  return {\n    numbersGuessed,\n    codeLength,\n    submit: () => {\n      let postCheckInfo = preprocessSubmit(mapStateToProps);\n      if (isTwoPlayer) {\n        handleTwoTimed(postCheckInfo);\n      } else {\n        handleSingleTimed(postCheckInfo);\n      }\n    },\n  };\n}\n\nexport const TimedModeSubmitContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(SubmitButton);\n","import { connect } from \"react-redux\";\nimport { ClassicMode } from \"../views/ClassicMode\";\nimport { TimedMode } from \"../views/TimedMode\";\n\nfunction mapStateToProps(state) {\n  return {\n    turnChange: state.turnChange,\n  };\n}\n\nexport const ClassicModeContainer = connect(mapStateToProps)(ClassicMode);\nexport const TimedModeContainer = connect(mapStateToProps)(TimedMode);\n","import React from \"react\";\nimport { MoveHistoryContainer } from \"../containers/MoveHistoryContainer\";\nimport { UserBoardContainer } from \"../containers/UserBoardContainer\";\nimport { HintButtonContainer } from \"../containers/HintButtonContainer\";\nimport { ChangeTurnContainer } from \"../containers/ChangeTurnContainer\";\nimport { PropTypes } from \"prop-types\";\nimport { ClassicModeSubmit } from \"../containers/ClassicModeSubmit\";\nimport { AddExtraTurnContainer } from \"../containers/AddExtraTurnContainer\";\n\nexport function ClassicMode(props) {\n  let { turnChange } = props;\n  if (turnChange) {\n    return <ChangeTurnContainer />;\n  }\n  return (\n    <>\n      <section className={\"user_input\"}>\n        <MoveHistoryContainer />\n        <section className={\"input_section\"}>\n          <h1>My Guess</h1>\n          <UserBoardContainer />\n        </section>\n        <section className={\"code_submit\"}>\n          <ClassicModeSubmit />\n          <HintButtonContainer />\n          <AddExtraTurnContainer />\n        </section>\n      </section>\n    </>\n  );\n}\n\nClassicMode.propTypes = {\n  turnChange: PropTypes.bool,\n};\n","import React from \"react\";\nimport { MoveHistoryContainer } from \"../containers/MoveHistoryContainer\";\nimport { UserBoardContainer } from \"../containers/UserBoardContainer\";\nimport { HintButtonContainer } from \"../containers/HintButtonContainer\";\nimport { PropTypes } from \"prop-types\";\nimport { ChangeTurnContainer } from \"../containers/ChangeTurnContainer\";\nimport { TimedModeSubmitContainer } from \"../containers/TimedModeSubmitContainer\";\n\nexport function TimedMode(props) {\n  let { turnChange } = props;\n  if (turnChange) {\n    return <ChangeTurnContainer />;\n  }\n  return (\n    <>\n      <section className={\"user_input\"}>\n        <MoveHistoryContainer />\n\n        <section className={\"code_select\"}>\n          <h1>My Guess</h1>\n          <UserBoardContainer />\n        </section>\n        <section className={\"code_submit\"}>\n          <TimedModeSubmitContainer />\n          <HintButtonContainer />\n        </section>\n      </section>\n    </>\n  );\n}\nTimedMode.propTypes = {\n  turnChange: PropTypes.bool,\n};\n","import { connect } from \"react-redux\";\nimport { CLASSIC_MODE, TIMED_MODE } from \"../actions/actionTypes\";\nimport { GameModeSelectView } from \"../views/buttons/GameModeSelectView\";\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    selectClassic: () => dispatch({ type: CLASSIC_MODE }),\n    selectTimed: () => dispatch({ type: TIMED_MODE }),\n  };\n}\n\nexport const GameModeSelectContainer = connect(\n  null,\n  mapDispatchToProps\n)(GameModeSelectView);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function GameModeSelectView(props) {\n  let { selectClassic, selectTimed } = props;\n  return (\n    <section className={\"intro_screen\"}>\n      <button onClick={() => selectClassic()} className={\"game_options\"}>\n        Classic Mode\n      </button>\n      <button onClick={() => selectTimed()} className={\"game_options\"}>\n        Timed Mode\n      </button>\n    </section>\n  );\n}\n\nGameModeSelectView.propTypes = {\n  selectClassic: PropTypes.func,\n  selectTimed: PropTypes.func,\n};\n","import { connect } from \"react-redux\";\nimport { Mastermind } from \"../views/Mastermind\";\n\nfunction mapStateToProps(state) {\n  return {\n    gameStatus: state.gameStatus,\n    winner: state.winner,\n    versusComputer: state.advancedOptions?.computer,\n    gameType: state.gameType,\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nexport const MastermindContainer = connect(mapStateToProps)(Mastermind);\n","import React from \"react\";\nimport { PlayerCreateCodeView } from \"./PlayerCreateCodeView\";\nimport { GameOverContainer } from \"../containers/GameOverContainer\";\nimport { VersusModeContainer } from \"../containers/VersusButtonContainer\";\nimport { CLASSIC_MODE, TIMED_MODE } from \"../actions/actionTypes\";\nimport PropTypes from \"prop-types\";\nimport {\n  ClassicModeContainer,\n  TimedModeContainer,\n} from \"../containers/PlayModeContainers\";\nimport { GameOptionsContainer } from \"../containers/GameOptionsContainer\";\nimport { GameModeSelectContainer } from \"../containers/GameModeSelectContainer\";\n\nexport function Mastermind(props) {\n  let { gameStatus, winner, versusComputer, gameType, isTwoPlayer } = props;\n  //if game type is null, means we haven't started the game at all, display intro screen\n  if (isTwoPlayer === null) {\n    return <VersusModeContainer />;\n  }\n  if (gameType === null) {\n    return <GameModeSelectContainer />;\n  }\n  let display;\n  //if winner is not null, means game is over.\n  if (winner !== null) {\n    display = <GameOverContainer />;\n  } else if (!gameStatus) {\n    //if game status is false, means we've selected game type, no winner or loser, so we need to set code options\n    if (versusComputer === false) {\n      //by default versus computer is null, will only run if gameStatus is false and versus computer is false aka after GameSelect has chosen vs player\n      display = (\n        <section className={\"start_game_select\"}>\n          <PlayerCreateCodeView />\n        </section>\n      );\n    } else {\n      //if game status is false, means we need to set up game.\n      display = (\n        <section className={\"start_game_select\"}>\n          <GameOptionsContainer />\n        </section>\n      );\n    }\n\n    //if game started, no winner, and game type is selected, one of these will run\n  } else if (gameType === TIMED_MODE) {\n    //if game started, no winner, and game type is selected, one of these will run\n    display = <TimedModeContainer />;\n  } else if (gameType === CLASSIC_MODE) {\n    display = <ClassicModeContainer />;\n  }\n\n  return display;\n}\n\nMastermind.propTypes = {\n  gameStatus: PropTypes.bool,\n  winner: PropTypes.bool,\n  versusComputer: PropTypes.bool,\n  gameType: PropTypes.string,\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nfunction minutesToMilliseconds(minutes) {\n  let seconds = minutes * 60;\n  let milliseconds = seconds * 1000;\n  return milliseconds;\n}\nexport function CountdownTimer(props) {\n  let { endGame, timeAllowed, isTwoPlayer, changeTurn, turnChange } = props;\n  let [remainingTime, updateTime] = useState(`${timeAllowed}:00`);\n  let countDownFrom = useRef(minutesToMilliseconds(timeAllowed));\n  useEffect(() => {\n    if (turnChange) {\n      countDownFrom.current = minutesToMilliseconds(timeAllowed);\n      return null;\n    }\n    let interval = setInterval(() => {\n      countDownFrom.current -= 1000;\n\n      if (countDownFrom.current <= 0) {\n        if (isTwoPlayer.playerNumTurn === 1) {\n          changeTurn();\n        } else {\n          endGame();\n        }\n        clearInterval(interval);\n      }\n      let toMinutes = countDownFrom.current / 60000;\n      let minutes = Math.floor(toMinutes);\n      let toSeconds = countDownFrom.current % 60000;\n      let seconds = Math.floor(toSeconds / 1000);\n      if (seconds < 10) {\n        seconds = \"0\" + seconds;\n      }\n      updateTime(`${minutes}:${seconds}`);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [endGame, changeTurn, isTwoPlayer, turnChange]);\n\n  return <p>Time Remaining: {`${remainingTime}`}</p>;\n}\n\nCountdownTimer.propTypes = {\n  endGame: PropTypes.func,\n  timeAllowed: PropTypes.number,\n  isTwoPlayer: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  changeTurn: PropTypes.func,\n  turnChange: PropTypes.bool,\n};\n","import { connect } from \"react-redux\";\nimport { changeTurn, gameWon, versusComputer } from \"../actions/actions\";\nimport { SET_SCREEN_CHANGE } from \"../actions/actionTypes\";\nimport { CountdownTimer } from \"../views/CountdownTimer\";\n\nfunction mapStateToProps(state) {\n  return {\n    timeAllowed: state.advancedOptions?.timeAllowed,\n    isTwoPlayer: state.isTwoPlayer,\n    turnChange: state.turnChange,\n    advancedOptions: state.advancedOptions,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    finishGame: () => dispatch(gameWon()),\n    changePlayers: (\n      codeLength,\n      codeOptions,\n      turnsAllowed,\n      timeAllowed,\n      turnsMade\n    ) => {\n      dispatch({ type: SET_SCREEN_CHANGE });\n      dispatch(changeTurn());\n      dispatch(\n        versusComputer([\n          codeLength,\n          codeOptions,\n          turnsAllowed,\n          timeAllowed,\n          turnsMade,\n        ])\n      );\n    },\n  };\n}\n\nfunction mergeProps(mapStateToProps, mapDispatchToProps) {\n  let {\n    timeAllowed,\n    isTwoPlayer,\n    turnChange,\n    advancedOptions,\n  } = mapStateToProps;\n  let { finishGame, changePlayers } = mapDispatchToProps;\n  let { codeLength, codeOptions, turnsAllowed, turnsMade } = advancedOptions;\n  return {\n    timeAllowed,\n    isTwoPlayer,\n    turnChange,\n    endGame: () => finishGame(),\n    changeTurn: () =>\n      changePlayers(\n        codeLength,\n        codeOptions,\n        turnsAllowed,\n        timeAllowed,\n        turnsMade\n      ),\n  };\n}\n\nexport const CountdownTimerContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(CountdownTimer);\n","import { connect } from \"react-redux\";\nimport { TurnsRemaining } from \"../views/TurnsRemaining\";\n\nfunction mapStateToProps(state) {\n  return {\n    turnsAllowed: state.advancedOptions?.turnsAllowed,\n    turnsMade: state.advancedOptions?.turnsMade,\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nexport const TurnsRemainingContainer = connect(mapStateToProps)(TurnsRemaining);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function TurnsRemaining(props) {\n  let { turnsAllowed, turnsMade, isTwoPlayer } = props;\n  if (isTwoPlayer) {\n    return <p> Moves Made: {turnsMade}</p>;\n  }\n  return <p>Turns Remaining: {turnsAllowed - turnsMade}</p>;\n}\n\nTurnsRemaining.propTypes = {\n  turnsAllowed: PropTypes.number,\n  turnsMade: PropTypes.number,\n  isTwoPlayer: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n};\n","import { connect } from \"react-redux\";\nimport { TitleView } from \"../views/TitleView\";\n\nfunction mapStateToProps(state) {\n  return {\n    gameType: state.gameType,\n    gameStatus: state.gameStatus,\n    numPlayers: state.isTwoPlayer,\n  };\n}\n\nexport const TitleContainer = connect(mapStateToProps)(TitleView);\n","import React from \"react\";\nimport { ModeDisplayContainer } from \"../containers/ModeDisplayContainer\";\nimport { ScoreContainer } from \"../containers/ScoreContainer\";\nimport { CountdownTimerContainer } from \"../containers/CountdownTimerContainer\";\nimport { CLASSIC_MODE, TIMED_MODE } from \"../actions/actionTypes\";\nimport { TurnsRemainingContainer } from \"../containers/TurnsRemainingContainer\";\nimport { PropTypes } from \"prop-types\";\n\nexport function TitleView(props) {\n  let { gameType, gameStatus, numPlayers } = props;\n  let gameInfo = null;\n  let players = numPlayers ? (\n    <p>Player {numPlayers.playerNumTurn} Turn</p>\n  ) : (\n    <p>Single Player</p>\n  );\n  if (gameType === TIMED_MODE && gameStatus) {\n    gameInfo = (\n      <section className={\"mode_info\"}>\n        <ModeDisplayContainer />\n        <ScoreContainer />\n        {players}\n        <CountdownTimerContainer />\n      </section>\n    );\n  }\n  if (gameType === CLASSIC_MODE && gameStatus) {\n    gameInfo = (\n      <section className={\"mode_info\"}>\n        <ModeDisplayContainer />\n        {players}\n        <TurnsRemainingContainer />\n      </section>\n    );\n  }\n  return (\n    <section className={\"title\"}>\n      <h1 className={\"game_name\"}>Mastermind</h1>\n      {gameInfo}\n    </section>\n  );\n}\n\nTitleView.propTypes = {\n  gameType: PropTypes.string,\n  gameStatus: PropTypes.bool,\n  numPlayers: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n};\n","import \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./createStore\";\nimport { MastermindContainer } from \"./containers/MastermindContainer\";\nimport React from \"react\";\nimport { TitleContainer } from \"./containers/TitleContainer\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"container\">\n        <TitleContainer />\n        <MastermindContainer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}