{"version":3,"sources":["actions/actionTypes.js","reducers/userBoardReducer.js","reducers/advancedOptionsReducer.js","reducers/rootReducer.js","reducers/userSelectedIndex.js","reducers/moveHistoryReducer.js","reducers/correctCodeReducer.js","reducers/gameStatusReducer.js","reducers/isPlayerWinnerReducer.js","reducers/scoreReducer.js","reducers/gameTypeReducer.js","reducers/versusModeReducer.js","reducers/turnChangeReducer.js","actions/actions.js","actions/retrieveApi.js","createStore.js","middlewares/getCodeFromApi.js","containers/AdvancedOptionsContainer.js","views/AdvancedOptionsView.js","containers/ChangeModeContainer.js","views/buttons/ChangeModeButton.js","containers/ModeDisplayContainer.js","views/ModeDisplay.js","containers/GameSelectContainer.js","views/buttons/GameSelectView.js","views/buttons/SubmitButton.js","containers/CreateOwnCodeSubmitContainer.js","views/buttons/CodeOptions.js","containers/CodeOptionsContainer.js","views/buttons/UserBoard.js","containers/UserBoardContainer.js","views/PlayerCreateCodeView.js","views/MoveHistory.js","containers/MoveHistoryContainer.js","containers/ScoreContainer.js","views/ScoreView.js","containers/GameOverContainer.js","views/GameOverView.js","views/buttons/IntroScreenView.js","containers/VersusButtonContainer.js","views/buttons/VersusModeButton.js","containers/SubmitButtonContainer.js","gameLogic/gameLogicFunctions.js","views/buttons/AddExtraTurnButton.js","containers/HintButtonContainer.js","views/buttons/HintButton.js","containers/ChangeTurnContainer.js","views/ChangeTurnScreen.js","containers/PlayModeContainers.js","views/ClassicMode.js","views/TimedMode.js","containers/MastermindContainer.js","views/Mastermind.js","views/CountdownTimer.js","containers/CountdownTimerContainer.js","containers/TurnsRemainingContainer.js","views/TurnsRemaining.js","containers/TitleContainer.js","views/TitleView.js","App.js","reportWebVitals.js","index.js"],"names":["SET_SECRET_CODE","USER_INPUT","SELECT_INPUT_SPOT","ADD_USER_MOVE","VERSUS_COMPUTER","VERSUS_PLAYER","GAME_WON","GAME_LOST","START_PLAYER","ADD_ANOTHER_TURN","ONE_MORE_CHANCE","CLASSIC_MODE","TIMED_MODE","CORRECT_GUESS","NEW_GAME","CHANGE_MODE","HINT_GIVEN","TWO_PLAYER","ONE_PLAYER","TWO_PLAYER_UPDATE_SCORE","TWO_PLAYER_CHANGE_TURN","START_TURN","SET_SCREEN_CHANGE","initialState","numbersGuessed","board","Array","hints","hintCount","intialState","computer","codeLength","codeOptions","turnsAllowed","turnsMade","timeAllowed","rootReducer","combineReducers","userBoard","state","action","type","newBoard","fill","selectedCodeIndex","codeInput","copyBoard","slice","copyNumsGuessed","Object","assign","hint","index","value","nextHint","nextHintCount","nextNumsGuessed","updateBoard","nextBoard","move","moves","length","userSelected","moveHistory","newState","push","correctCode","code_info","advancedOptions","addTurn","turns","gameStatus","winner","score","gameType","isTwoPlayer","playerNumTurn","1","2","playerNum","playerScore","nextState","nextTurn","turnChange","setCode","actionUserMoveToHistory","versusPlayer","versusComputer","gameWon","newGame","setTwoPlayer","changeTurn","twoPlayerAddScore","getRandomNumbers","size","range","a","store","dispatch","fetch","response","status","text","receivedString","numArray","countOfEachNum","i","currentNum","stringToInt","parseInt","isNaN","code","newCode","countNums","randNum","Math","floor","random","Error","middlewares","next","thunk","logger","createStore","applyMiddleware","AdvancedOptionsContainer","connect","vsComputer","arg","getState","integerize","map","x","vsPlayer","intergize","props","useState","lengthChange","optionsLength","optionsChange","turnsLength","turnsChange","changeTime","gameTypeInputs","onChange","event","target","className","min","max","id","onClick","ChangeModeContainer","switchModes","mode","newMode","ModeDisplayContainer","GameSelectContainer","quickPlay","playAgain","toggleAdvanceOptions","selectDifficulty","modeDisplay","gamePlay","userChoice","clickHandler","SubmitButton","submit","clickCount","clickAction","handleClick","alert","CreateOwnCodeSubmitContainer","codeCreated","numCount","reduce","acc","num","CodeOptionButtons","styled","button","CodeOptions","inputChoiceInto","gameSize","result","propTypes","PropTypes","number","func","CodeOptionsContainer","UserBoardButton","highlight","hasHint","UserBoardContainer","changeInputSpot","selectInputSpot","boardLength","showOptions","PlayerCreateCodeView","sentenceOne","red","white","sentenceTwo","sentenceThree","randomPhraseGenerator","correct","MoveHistoryContainer","previousMoves","display","history","redPegs","whitePegs","correctGuess","randomPhrase","join","ScoreContainer","showScore","GameOverContainer","showCode","oneMoreChance","toggleNewGame","isAnswerSeen","showAnswer","playAgainButton","gameSelect","loser","score1","score2","moveCounts","showAnswerButton","answer","isWinner","IntroScreenView","VersusModeContainer","onePlayer","twoPlayer","SubmitButtonContainer","userBoardValues","checkAnswer","userAnswer","correctAnswer","clone","user","checkUserGuess","previousMove","usePhrase","AddExtraTurnButton","addExtraTurn","HintButtonContainer","requestHint","newHint","currentGuess","previousGivenHints","undefined","handleHintGivenLogic","ChangeTurnContainer","startTurn","mapStateToProps","ClassicModeContainer","TimedModeContainer","MastermindContainer","minutesToMilliseconds","minutes","CountdownTimerContainer","endGame","remainingTime","updateTime","countDownFrom","useRef","useEffect","current","interval","setInterval","clearInterval","toMinutes","toSeconds","seconds","TurnsRemainingContainer","TitleContainer","numPlayers","gameInfo","players","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e44c963.chunk.js","sourcesContent":["export const FETCH_CODE = \"FETCH_CODE\";\nexport const SET_SECRET_CODE = \"SET_SECRET_CODE\";\nexport const SET_LOADING_SCREEN = \"SET_LOADING_SCREEN\";\nexport const ERROR_GETTING_CODE = \"ERROR_GETTING_CODE\";\nexport const CODE_SIZE_SELECTED = \"CODE_SIZE_SELECTED \";\nexport const USER_INPUT = \"USER_INPUT\";\nexport const SELECT_INPUT_SPOT = \"SELECT_INPUT_SPOT\";\nexport const UNSELECT_INPUT_SPOT = \"UNSELECT_INPUT_SPOT\";\nexport const ADD_USER_MOVE = \"ADD_USER_MOVE\";\nexport const VERSUS_COMPUTER = \"VERSUS_COMPUTER\";\nexport const VERSUS_PLAYER = \"VERSUS_PLAYER\";\nexport const GAME_WON = \"GAME_WON\";\nexport const GAME_LOST = \"GAME_LOST\";\nexport const START_PLAYER = \"START_PLAYER\";\nexport const ADD_ANOTHER_TURN = \"ADD_ANOTHER_TURN\";\nexport const ONE_MORE_CHANCE = \"ONE_MORE_CHANCE\";\nexport const CLASSIC_MODE = \"CLASSIC_MODE\";\nexport const TIMED_MODE = \"TIMED_MODE\";\nexport const CORRECT_GUESS = \"CORRECT_GUESS\";\nexport const NEW_GAME = \"NEW_GAME\";\nexport const CHANGE_MODE = \"CHANGE_MODE\";\nexport const HINT_GIVEN = \"HINT_GIVEN\";\nexport const TWO_PLAYER = \"TWO_PLAYER\";\nexport const ONE_PLAYER = \"ONE PLAYER\";\nexport const TWO_PLAYER_UPDATE_SCORE = \"TWO_PLAYER_UPDATE_SCORE\";\nexport const TWO_PLAYER_CHANGE_TURN = \"TWO_PLAYER_CHANGE_TURN\";\nexport const START_TURN = \"START_TURN\";\nexport const SET_SCREEN_CHANGE = \"SET_SCREEN_CHANGE\";\n","import {\n  ADD_USER_MOVE,\n  HINT_GIVEN,\n  START_PLAYER,\n  USER_INPUT,\n  VERSUS_COMPUTER,\n  VERSUS_PLAYER,\n} from \"../actions/actionTypes\";\nconst initialState = {\n  numbersGuessed: 0,\n  board: new Array(4),\n  hints: {},\n  hintCount: 0,\n};\n\nexport function userBoardReducer(state = initialState, action) {\n  switch (action.type) {\n    case VERSUS_COMPUTER:\n    case VERSUS_PLAYER:\n    case START_PLAYER:\n      let { codeLength } = action;\n      let newBoard = new Array(codeLength).fill(0);\n      return { numbersGuessed: 0, board: newBoard, hints: {}, hintCount: 0 };\n    case USER_INPUT:\n      let { selectedCodeIndex, codeInput } = action;\n      let copyBoard = state.board.slice();\n      let copyNumsGuessed = state.numbersGuessed;\n      if (copyBoard[selectedCodeIndex] === 0) {\n        copyNumsGuessed++;\n      }\n      copyBoard[selectedCodeIndex] = codeInput;\n      return Object.assign({}, state, {\n        numbersGuessed: copyNumsGuessed,\n        board: copyBoard,\n      });\n    case HINT_GIVEN:\n      let { hint } = action;\n      let { index, value } = hint;\n      let nextHint = Object.assign({}, state.hints);\n      nextHint[index] = value;\n      let nextHintCount = state.hintCount + 1;\n      let nextNumsGuessed = state.board[index]\n        ? state.numbersGuessed\n        : state.numbersGuessed + 1;\n      let updateBoard = state.board.slice();\n      updateBoard[index] = value;\n      return Object.assign({}, state, {\n        hints: nextHint,\n        hintCount: nextHintCount,\n        numbersGuessed: nextNumsGuessed,\n        board: updateBoard,\n      });\n    case ADD_USER_MOVE:\n      //since we're leaving hints in players guess, we need to track hintCount to allow submit button to work.\n      let nextBoard = new Array(action.move.moves.length).fill(0);\n      for (let index in state.hints) {\n        nextBoard[index] = state.hints[index];\n      }\n      return Object.assign({}, state, {\n        numbersGuessed: state.hintCount,\n        board: nextBoard,\n      });\n    default:\n      return state;\n  }\n}\n","import {\n  ADD_USER_MOVE,\n  VERSUS_COMPUTER,\n  VERSUS_PLAYER,\n  ADD_ANOTHER_TURN,\n  ONE_MORE_CHANCE,\n} from \"../actions/actionTypes\";\n\nconst intialState = {\n  computer: null,\n  codeLength: null,\n  codeOptions: null,\n  turnsAllowed: null,\n  turnsMade: 0,\n  timeAllowed: null,\n};\n\nexport function advancedOptionsReducer(state = intialState, action) {\n  switch (action.type) {\n    case VERSUS_COMPUTER:\n      return Object.assign({}, state, {\n        computer: true,\n        codeLength: action.codeLength,\n        codeOptions: action.codeOptions,\n        turnsMade: 0,\n        turnsAllowed: action.turnsAllowed,\n        timeAllowed: action.timeAllowed,\n      });\n    case VERSUS_PLAYER:\n      return Object.assign({}, state, {\n        computer: false,\n        codeLength: action.codeLength,\n        codeOptions: action.codeOptions,\n        turnsMade: 0,\n        turnsAllowed: action.turnsAllowed,\n        timeAllowed: action.timeAllowed,\n      });\n    case ADD_USER_MOVE:\n      let turnsMade = state.turnsMade + 1;\n      return Object.assign({}, state, { turnsMade: turnsMade });\n    case ADD_ANOTHER_TURN:\n    case ONE_MORE_CHANCE:\n      let addTurn = state.turnsAllowed + action.turns;\n      return Object.assign({}, state, { turnsAllowed: addTurn });\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { userBoardReducer } from \"./userBoardReducer\";\nimport { userSelectedReducer } from \"./userSelectedIndex\";\nimport { moveHistoryReducer } from \"./moveHistoryReducer\";\nimport { correctCodeReducer } from \"./correctCodeReducer\";\nimport { advancedOptionsReducer } from \"./advancedOptionsReducer\";\nimport { gameStatusReducer } from \"./gameStatusReducer\";\nimport { isPlayerWinnerReducer } from \"./isPlayerWinnerReducer\";\nimport { scoreReducer } from \"./scoreReducer\";\nimport { gameTypeReducer } from \"./gameTypeReducer\";\nimport { versusModeReducer } from \"./versusModeReducer\";\nimport { turnChangeReducer } from \"./turnChangeReducer\";\n\nexport const rootReducer = combineReducers({\n  userBoard: userBoardReducer,\n  userSelected: userSelectedReducer,\n  moveHistory: moveHistoryReducer,\n  correctCode: correctCodeReducer,\n  advancedOptions: advancedOptionsReducer,\n  gameStatus: gameStatusReducer,\n  winner: isPlayerWinnerReducer,\n  score: scoreReducer,\n  gameType: gameTypeReducer,\n  isTwoPlayer: versusModeReducer,\n  turnChange: turnChangeReducer,\n});\n","import {\n  ADD_USER_MOVE,\n  SELECT_INPUT_SPOT,\n  USER_INPUT,\n  VERSUS_COMPUTER,\n  VERSUS_PLAYER,\n} from \"../actions/actionTypes\";\n\nexport function userSelectedReducer(state = null, action) {\n  switch (action.type) {\n    case SELECT_INPUT_SPOT:\n      return action.index;\n    case ADD_USER_MOVE:\n    case USER_INPUT:\n    case VERSUS_COMPUTER:\n    case VERSUS_PLAYER:\n      return null;\n    default:\n      return state;\n  }\n}\n","import {\n  ADD_USER_MOVE,\n  NEW_GAME,\n  TWO_PLAYER_CHANGE_TURN,\n} from \"../actions/actionTypes\";\n\nexport function moveHistoryReducer(state = [], action) {\n  switch (action.type) {\n    case ADD_USER_MOVE:\n      let newState = state.slice();\n      newState.push(action.move);\n      return newState;\n\n    case NEW_GAME:\n    case TWO_PLAYER_CHANGE_TURN:\n      return [];\n    default:\n      return state;\n  }\n}\n","import { SET_SECRET_CODE, VERSUS_COMPUTER } from \"../actions/actionTypes\";\n\nexport function correctCodeReducer(state = null, action) {\n  switch (action.type) {\n    case VERSUS_COMPUTER:\n      return null;\n    case SET_SECRET_CODE:\n      return action.code_info;\n    default:\n      return state;\n  }\n}\n","import {\n  GAME_WON,\n  GAME_LOST,\n  VERSUS_COMPUTER,\n  START_PLAYER,\n  ONE_MORE_CHANCE,\n} from \"../actions/actionTypes\";\n\nexport function gameStatusReducer(state = false, action) {\n  switch (action.type) {\n    case VERSUS_COMPUTER:\n    case START_PLAYER:\n    case ONE_MORE_CHANCE:\n      return true;\n    case GAME_WON:\n    case GAME_LOST:\n      return false;\n\n    default:\n      return state;\n  }\n}\n","import {\n  GAME_WON,\n  GAME_LOST,\n  VERSUS_PLAYER,\n  VERSUS_COMPUTER,\n  ONE_MORE_CHANCE,\n  CHANGE_MODE,\n} from \"../actions/actionTypes\";\n\nexport function isPlayerWinnerReducer(state = null, action) {\n  switch (action.type) {\n    case GAME_WON:\n      return true;\n    case GAME_LOST:\n      return false;\n    case VERSUS_PLAYER:\n    case VERSUS_COMPUTER:\n    case ONE_MORE_CHANCE:\n    case CHANGE_MODE:\n      return null;\n    default:\n      return state;\n  }\n}\n","import { CORRECT_GUESS, NEW_GAME } from \"../actions/actionTypes\";\n\nexport function scoreReducer(state = 0, action) {\n  switch (action.type) {\n    case CORRECT_GUESS:\n      return state + 1;\n    case NEW_GAME:\n      return 0;\n    default:\n      return state;\n  }\n}\n","import { CLASSIC_MODE, TIMED_MODE } from \"../actions/actionTypes\";\n\nexport function gameTypeReducer(state = null, action) {\n  switch (action.type) {\n    case TIMED_MODE:\n      return TIMED_MODE;\n    case CLASSIC_MODE:\n      return CLASSIC_MODE;\n    default:\n      return state;\n  }\n}\n","import {\n  ONE_PLAYER,\n  TWO_PLAYER,\n  TWO_PLAYER_CHANGE_TURN,\n  TWO_PLAYER_UPDATE_SCORE,\n} from \"../actions/actionTypes\";\n\nexport function versusModeReducer(state = null, action) {\n  switch (action.type) {\n    case TWO_PLAYER:\n      return { playerNumTurn: 1, 1: 0, 2: 0 };\n    case TWO_PLAYER_UPDATE_SCORE:\n      let { playerNum, playerScore } = action;\n      let nextState = Object.assign({}, state);\n      if (playerScore === \"add\") {\n        nextState[playerNum]++;\n      } else {\n        nextState[playerNum] = playerScore;\n      }\n      return nextState;\n    case TWO_PLAYER_CHANGE_TURN:\n      let nextTurn = state.playerNumTurn + 1;\n      return Object.assign({}, state, { playerNumTurn: nextTurn });\n\n    case ONE_PLAYER:\n      return false;\n    default:\n      return state;\n  }\n}\n","import { SET_SCREEN_CHANGE, START_TURN } from \"../actions/actionTypes\";\n\nexport function turnChangeReducer(state = false, action) {\n  switch (action.type) {\n    case START_TURN:\n      return false;\n    case SET_SCREEN_CHANGE:\n      return true;\n    default:\n      return state;\n  }\n}\n","import {\n  UNSELECT_INPUT_SPOT,\n  ADD_ANOTHER_TURN,\n  NEW_GAME,\n  CORRECT_GUESS,\n  ONE_MORE_CHANCE,\n  ERROR_GETTING_CODE,\n  SET_LOADING_SCREEN,\n  SET_SECRET_CODE,\n  CODE_SIZE_SELECTED,\n  USER_INPUT,\n  SELECT_INPUT_SPOT,\n  ADD_USER_MOVE,\n  VERSUS_COMPUTER,\n  VERSUS_PLAYER,\n  GAME_WON,\n  GAME_LOST,\n  HINT_GIVEN,\n  ONE_PLAYER,\n  TWO_PLAYER,\n  TWO_PLAYER_CHANGE_TURN,\n  TWO_PLAYER_UPDATE_SCORE,\n} from \"./actionTypes\";\n\nexport function errorFetchingAPICode() {\n  return { type: ERROR_GETTING_CODE };\n}\n\nexport function setCode(code_info) {\n  return { type: SET_SECRET_CODE, code_info: code_info };\n}\n\nexport function loadingScreen() {\n  return { type: SET_LOADING_SCREEN };\n}\n\nexport function codeSizeSelected(size) {\n  return { type: CODE_SIZE_SELECTED, size: size };\n}\n\nexport function userInput(selectedCodeIndex, codeInput) {\n  return {\n    type: USER_INPUT,\n    selectedCodeIndex: selectedCodeIndex,\n    codeInput: codeInput,\n  };\n}\n\nexport function selectInputSpot(index) {\n  return { type: SELECT_INPUT_SPOT, index: index };\n}\n\nexport function unselectInputSpot(index) {\n  return { type: UNSELECT_INPUT_SPOT, index };\n}\n\nexport function actionUserMoveToHistory(move) {\n  return { type: ADD_USER_MOVE, move: move };\n}\n\nexport function versusPlayer(\n  codeLength,\n  codeOptions,\n  turnsAllowed,\n  timeAllowed\n) {\n  return {\n    type: VERSUS_PLAYER,\n    codeLength,\n    codeOptions,\n    turnsAllowed,\n    timeAllowed,\n  };\n}\n\nexport function versusComputer(\n  codeLength,\n  codeOptions,\n  turnsAllowed,\n  timeAllowed\n) {\n  return {\n    type: VERSUS_COMPUTER,\n    codeLength,\n    codeOptions,\n    turnsAllowed,\n    timeAllowed,\n  };\n}\n\nexport function gameWon() {\n  return { type: GAME_WON };\n}\n\nexport function gameLost() {\n  return { type: GAME_LOST };\n}\n\nexport function addExtraTurn(turns = 1) {\n  return { type: ADD_ANOTHER_TURN, turns };\n}\nexport function oneMoreChance(turns = 1) {\n  return { type: ONE_MORE_CHANCE, turns };\n}\n\nexport function updateScore() {\n  return { type: CORRECT_GUESS };\n}\n\nexport function newGame() {\n  return { type: NEW_GAME };\n}\n\nexport function hintRequested(index, value) {\n  return { type: HINT_GIVEN, hint: { index: index, value: value } };\n}\n\nexport function setOnePlayer() {\n  return { type: ONE_PLAYER };\n}\n\nexport function setTwoPlayer() {\n  return { type: TWO_PLAYER };\n}\n\nexport function changeTurn() {\n  return { type: TWO_PLAYER_CHANGE_TURN };\n}\n\nexport function twoPlayerAddScore(playerNum, playerScore) {\n  return {\n    type: TWO_PLAYER_UPDATE_SCORE,\n    playerNum: playerNum,\n    playerScore: playerScore,\n  };\n}\n","import store from \"../createStore\";\nimport { loadingScreen, setCode, errorFetchingAPICode } from \"./actions\";\n\n//trigger this as middleware\nexport async function getRandomNumbers(size, range) {\n  store.dispatch(loadingScreen());\n  let response = await fetch(\n    `https://www.random.org/integers/?num=${size}&min=1&max=${range}&col=1&base=10&format=plain&rnd=new`\n  );\n\n  if (response.status === 200) {\n    //response comes as plain text, not JSON.\n    let receivedString = await response.text();\n    let numArray = [];\n    let countOfEachNum = {};\n    for (let i = 0; i < receivedString.length; i++) {\n      let currentNum = receivedString[i];\n      let stringToInt = parseInt(currentNum);\n      if (!isNaN(stringToInt)) {\n        //avoid line breaks\n        numArray.push(stringToInt);\n        countOfEachNum[stringToInt] = countOfEachNum[stringToInt] + 1 || 1;\n      }\n    }\n    store.dispatch(setCode({ code: numArray, countOfEachNum: countOfEachNum }));\n  } else {\n    store.dispatch(errorFetchingAPICode());\n    let newCode = [];\n    let countNums = {};\n    for (let i = 0; i < size; i++) {\n      let randNum = Math.floor(Math.random() * range);\n      newCode.push(randNum);\n      countNums[randNum] = countNums[randNum] || 1;\n    }\n    store.dispatch(setCode({ code: newCode, countOfEachNum: countNums }));\n    throw new Error(response.status);\n  }\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport { rootReducer } from \"./reducers/rootReducer\";\nimport { triggerAPICall } from \"./middlewares/getCodeFromApi\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nlet middlewares = [triggerAPICall, thunk, logger];\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;\n","import { getRandomNumbers } from \"../actions/retrieveApi\";\nimport { VERSUS_COMPUTER } from \"../actions/actionTypes\";\n\nexport function triggerAPICall() {\n  return function wrap(next) {\n    return async function handleAction(action) {\n      let { type, codeLength, codeOptions } = action;\n      switch (type) {\n        case VERSUS_COMPUTER:\n          getRandomNumbers(codeLength, codeOptions);\n          break;\n        default:\n          break;\n      }\n\n      return next(action);\n    };\n  };\n}\n","import { connect } from \"react-redux\";\nimport {\n  versusPlayer,\n  versusComputer,\n  newGame,\n  setTwoPlayer,\n} from \"../actions/actions\";\nimport { SET_SCREEN_CHANGE } from \"../actions/actionTypes\";\nimport store from \"../createStore\";\nimport { AdvancedOptionsView } from \"../views/AdvancedOptionsView\";\n\nfunction mapStateToProps(state) {\n  return {\n    gameType: state.gameType,\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    vsComputer: (arg) => {\n      let state = store.getState();\n      if (state.isTwoPlayer) {\n        dispatch(setTwoPlayer());\n      }\n      let integerize = arg.map((x) => parseInt(x));\n\n      dispatch(newGame());\n      dispatch(versusComputer(...integerize));\n      dispatch({ type: SET_SCREEN_CHANGE });\n    },\n    vsPlayer: (arg) => {\n      let intergize = arg.map((x) => parseInt(x));\n      dispatch(newGame());\n      dispatch(versusPlayer(...intergize));\n    },\n  };\n}\n\nexport const AdvancedOptionsContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AdvancedOptionsView);\n","import React, { useState } from \"react\";\nimport { CLASSIC_MODE } from \"../actions/actionTypes\";\nimport { PropTypes } from \"prop-types\";\n\nexport function AdvancedOptionsView(props) {\n  let { vsPlayer, vsComputer, gameType, isTwoPlayer } = props;\n  let [codeLength, lengthChange] = useState(4);\n  let [optionsLength, optionsChange] = useState(8);\n  let [turnsLength, turnsChange] = useState(10);\n  let [timeAllowed, changeTime] = useState(4);\n  let gameTypeInputs =\n    gameType === CLASSIC_MODE ? (\n      <>\n        <section>\n          <label>Number Of Turns</label>\n          <input\n            onChange={(event) => turnsChange(event.target.value)}\n            type=\"range\"\n            className=\"slider\"\n            min=\"4\"\n            max=\"20\"\n            value={turnsLength}\n            id=\"turns_length\"\n          ></input>\n          <input\n            onChange={(event) => turnsChange(event.target.value)}\n            type=\"number\"\n            value={turnsLength}\n            min=\"4\"\n            max=\"20\"\n          ></input>\n        </section>\n        <section>\n          <button\n            onClick={() =>\n              vsComputer([codeLength, optionsLength, turnsLength, timeAllowed])\n            }\n          >\n            Play Versus Computer\n          </button>\n          {isTwoPlayer ? null : (\n            <button\n              onClick={() =>\n                vsPlayer([codeLength, optionsLength, turnsLength, timeAllowed])\n              }\n            >\n              Play Versus Player\n            </button>\n          )}\n        </section>\n      </>\n    ) : (\n      <>\n        <section>\n          <label>Time Allowed</label>\n          <input\n            onChange={(event) => changeTime(event.target.value)}\n            type=\"range\"\n            className=\"slider\"\n            min=\"1\"\n            max=\"10\"\n            value={timeAllowed}\n            id=\"turns_length\"\n          ></input>\n          <input\n            onChange={(event) => changeTime(event.target.value)}\n            type=\"number\"\n            value={timeAllowed}\n            min=\"1\"\n            max=\"10\"\n          ></input>\n        </section>\n        <button\n          onClick={() =>\n            vsComputer([codeLength, optionsLength, turnsLength, timeAllowed])\n          }\n        >\n          Play\n        </button>\n      </>\n    );\n  return (\n    <section>\n      <h3>Select Difficulty</h3>\n      <section>\n        <label>Code Length</label>\n        <input\n          onChange={(event) => lengthChange(event.target.value)}\n          type=\"range\"\n          className=\"slider\"\n          min=\"4\"\n          max=\"20\"\n          value={codeLength}\n          id=\"code_length\"\n        ></input>\n        <input\n          onChange={(event) => lengthChange(event.target.value)}\n          type=\"number\"\n          value={codeLength}\n          min=\"4\"\n          max=\"20\"\n        ></input>\n      </section>\n      <section>\n        <label>Number Of Options</label>\n        <input\n          onChange={(event) => optionsChange(event.target.value)}\n          type=\"range\"\n          className=\"slider\"\n          min=\"7\"\n          max=\"50\"\n          value={optionsLength}\n          id=\"options_length\"\n        ></input>\n        <input\n          onChange={(event) => optionsChange(event.target.value)}\n          type=\"number\"\n          value={optionsLength}\n          min=\"7\"\n          max=\"50\"\n        ></input>\n      </section>\n      {gameTypeInputs}\n    </section>\n  );\n}\n\nAdvancedOptionsView.propTypes = {\n  vsPlayer: PropTypes.func,\n  vsComputer: PropTypes.func,\n  gameType: PropTypes.string,\n  isTwoPlayer: PropTypes.object,\n};\n","import { connect } from \"react-redux\";\nimport { CHANGE_MODE } from \"../actions/actionTypes\";\nimport { ChangeModeButton } from \"../views/buttons/ChangeModeButton\";\n\nfunction mapStateToProps(state) {\n  return {\n    gameType: state.gameType,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    switchModes: (mode) => {\n      dispatch({ type: CHANGE_MODE });\n      dispatch({ type: mode });\n    },\n  };\n}\n\nexport const ChangeModeContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChangeModeButton);\n","import React from \"react\";\nimport { CLASSIC_MODE, TIMED_MODE } from \"../../actions/actionTypes\";\nimport { PropTypes } from \"prop-types\";\n\nexport function ChangeModeButton(props) {\n  let { switchModes, gameType } = props;\n  let newMode;\n  if (gameType === TIMED_MODE) {\n    newMode = CLASSIC_MODE;\n  } else {\n    newMode = TIMED_MODE;\n  }\n  return (\n    <button onClick={() => switchModes(newMode)} className={\"game_options\"}>\n      Change Mode\n    </button>\n  );\n}\n\nChangeModeButton.propTypes = {\n  switchModes: PropTypes.func,\n  gameType: PropTypes.string,\n};\n","import { connect } from \"react-redux\";\nimport { ModeDisplayView } from \"../views/ModeDisplay\";\n\nfunction mapStateToProps(state) {\n  return {\n    gameType: state.gameType,\n  };\n}\n\nexport const ModeDisplayContainer = connect(mapStateToProps)(ModeDisplayView);\n","import React from \"react\";\nimport { TIMED_MODE } from \"../actions/actionTypes\";\nimport { PropTypes } from \"prop-types\";\n\nexport function ModeDisplayView(props) {\n  let { gameType } = props;\n  return gameType === TIMED_MODE ? <h3>Timed Mode</h3> : <h3>Classic Mode</h3>;\n}\n\nModeDisplayView.propTypes = {\n  gameType: PropTypes.string,\n};\n","import { connect } from \"react-redux\";\nimport {\n  newGame,\n  setTwoPlayer,\n  versusComputer,\n  versusPlayer,\n} from \"../actions/actions\";\nimport { GameSelectView } from \"../views/buttons/GameSelectView\";\nimport store from \"../createStore\";\nimport { SET_SCREEN_CHANGE } from \"../actions/actionTypes\";\n\nfunction mapStateToProps(state) {\n  return {\n    winner: state.winner,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    quickPlay: () => {\n      let state = store.getState();\n      dispatch(newGame());\n      dispatch(versusComputer(4, 8, 10, 4));\n      if (state.isTwoPlayer) {\n        dispatch({ type: SET_SCREEN_CHANGE });\n        dispatch(setTwoPlayer());\n      }\n    },\n    playAgain: () => {\n      let state = store.getState();\n      let {\n        computer,\n        codeLength,\n        codeOptions,\n        turnsAllowed,\n        timeAllowed,\n      } = state.advancedOptions;\n      dispatch(newGame());\n      if (state.isTwoPlayer) {\n        dispatch({ type: SET_SCREEN_CHANGE });\n        dispatch(setTwoPlayer());\n      }\n      if (computer) {\n        dispatch(\n          versusComputer(codeLength, codeOptions, turnsAllowed, timeAllowed)\n        );\n      } else {\n        dispatch(\n          versusPlayer(codeLength, codeOptions, turnsAllowed, timeAllowed)\n        );\n      }\n    },\n  };\n}\nexport const GameSelectContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GameSelectView);\n","import React, { useState } from \"react\";\nimport { AdvancedOptionsContainer } from \"../../containers/AdvancedOptionsContainer\";\nimport { PropTypes } from \"prop-types\";\nimport { ChangeModeContainer } from \"../../containers/ChangeModeContainer\";\nimport { ModeDisplayContainer } from \"../../containers/ModeDisplayContainer\";\n\nexport function GameSelectView(props) {\n  let { quickPlay, playAgain, winner } = props;\n  let [advancedOptions, toggleAdvanceOptions] = useState(false);\n\n  let selectDifficulty = advancedOptions ? <AdvancedOptionsContainer /> : null;\n  let [modeDisplay, gamePlay, userChoice, clickHandler] =\n    winner === null\n      ? [\n          // eslint-disable-next-line react/jsx-key\n          <ModeDisplayContainer />,\n          // eslint-disable-next-line react/jsx-key\n          \" Quick Play\",\n          \"Advanced Options\",\n          quickPlay,\n        ]\n      : [\n          null,\n          // eslint-disable-next-line react/jsx-key\n          \"RUN IT BACK\",\n          \"Change Settings\",\n          playAgain,\n        ];\n\n  return (\n    <section className={\"game_select_container\"}>\n      {modeDisplay}\n      <button onClick={clickHandler} className={\"game_options\"}>\n        {gamePlay}\n      </button>\n      <button\n        onClick={() => toggleAdvanceOptions(!advancedOptions)}\n        className={\"game_options\"}\n      >\n        {userChoice}\n      </button>\n      <ChangeModeContainer />\n      {selectDifficulty}\n    </section>\n  );\n}\n\nGameSelectView.propTypes = {\n  quickPlay: PropTypes.func,\n  playAgain: PropTypes.func,\n  winner: PropTypes.bool,\n  gameType: PropTypes.string,\n};\n","import React, { useState } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function SubmitButton(props) {\n  const { numbersGuessed, submit, codeLength } = props;\n  let [clickCount, clickAction] = useState(0);\n  let handleClick = () => {\n    clickAction(clickCount + 1);\n    if (clickCount === 1) {\n      alert(\"Guess Incomplete\");\n    }\n    if (clickCount === 4) {\n      alert(\n        `Please completely fill out your guess before hitting the submit button. It should be ${codeLength} characters long.`\n      );\n    }\n\n    if (clickCount === 7) {\n      alert(\n        `Please enter ${codeLength} characters . This is your second to last warning.`\n      );\n    }\n\n    if (clickCount === 10) {\n      alert(\"Don't make me do this.\");\n    }\n\n    if (clickCount === 13) {\n    }\n    return null;\n  };\n  if (numbersGuessed >= codeLength) {\n    handleClick = submit;\n  }\n  return (\n    <button onClick={handleClick} className={\"game_options\"}>\n      Submit\n    </button>\n  );\n}\n\nSubmitButton.propTypes = {\n  numbersGuessed: PropTypes.number,\n  submit: PropTypes.func,\n  codeLength: PropTypes.number,\n};\n","import { connect } from \"react-redux\";\nimport { setCode } from \"../actions/actions\";\nimport { START_PLAYER } from \"../actions/actionTypes\";\nimport store from \"../createStore\";\nimport { SubmitButton } from \"../views/buttons/SubmitButton\";\n\nfunction mapStateToProps(state) {\n  return {\n    numbersGuessed: state.userBoard.numbersGuessed,\n    codeLength: state.advancedOptions.codeLength,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    submit: () => {\n      let state = store.getState();\n      let codeCreated = state.userBoard.board;\n      let numCount = codeCreated.reduce((acc, num) => {\n        acc[num] = acc[num] + 1 || 1;\n        return acc;\n      }, {});\n      dispatch(setCode({ code: codeCreated, countOfEachNum: numCount }));\n      dispatch({ type: START_PLAYER, codeLength: codeCreated.length });\n    },\n  };\n}\n\nexport const CreateOwnCodeSubmitContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SubmitButton);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst CodeOptionButtons = styled.button`\n  height: 7vw;\n  width: 7vw;\n  min-width: 25px;\n  min-height: 25px;\n`;\nexport function CodeOptions(props) {\n  let { userSelected, inputChoiceInto, gameSize } = props;\n  let result = [];\n  for (let i = 1; i <= gameSize; i++) {\n    result.push(\n      <CodeOptionButtons\n        onClick={\n          userSelected !== null ? () => inputChoiceInto(userSelected, i) : null\n        }\n      >\n        {i}\n      </CodeOptionButtons>\n    );\n  }\n  return result;\n}\n\nCodeOptions.propTypes = {\n  userSelected: PropTypes.number,\n  inputChoiceInto: PropTypes.func,\n  gameSize: PropTypes.number,\n};\n","import { connect } from \"react-redux\";\nimport { CodeOptions } from \"../views/buttons/CodeOptions\";\nimport { userInput } from \"../actions/actions\";\n\nfunction mapStateToProps(state) {\n  return {\n    userSelected: state.userSelected,\n    gameSize: state.advancedOptions.codeOptions,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    inputChoiceInto: (index, value) => {\n      dispatch(userInput(index, value));\n    },\n  };\n}\n\nexport const CodeOptionsContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CodeOptions);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport styled from \"styled-components\";\nimport { CodeOptionsContainer } from \"../../containers/CodeOptionsContainer\";\nlet UserBoardButton = styled.button`\n  height: 9vw;\n  width: 9vw;\n  background-color: ${(props) => (props.highlight ? \"green\" : \"white;\")};\n  font-size: 2vw;\n  min-width: 40px;\n  min-height: 40px;\n  border: ${(props) => (props.hasHint ? \"red solid 2px\" : null)};\n`;\n\nexport function UserBoard(props) {\n  let result = [];\n  let { userBoard, changeInputSpot, userSelected, hints } = props;\n\n  for (let i = 0; i < userBoard.length; i++) {\n    let hasHint = false;\n    if (hints?.[i]) {\n      hasHint = true;\n    }\n    result.push(\n      <UserBoardButton\n        boardLength={userBoard.length}\n        highlight={userSelected === i}\n        key={`userboard index ${i}`}\n        onClick={hasHint ? null : () => changeInputSpot(i)}\n        hasHint={hasHint}\n      >\n        {userBoard[i] || `Index ${i + 1}`}\n      </UserBoardButton>\n    );\n  }\n  let showOptions =\n    userSelected !== null ? (\n      <section className={\"code_options\"}>\n        <h1>Code Options</h1>\n        <CodeOptionsContainer />\n      </section>\n    ) : null;\n  return (\n    <section className={\"user_interaction\"}>\n      <section className={\"code_select\"}>{result}</section>\n      {showOptions}\n    </section>\n  );\n}\n\nUserBoard.propTypes = {\n  userBoard: PropTypes.array,\n  changeInputSpot: PropTypes.func,\n  userSelected: PropTypes.number,\n  hints: PropTypes.object,\n};\n","import { connect } from \"react-redux\";\nimport { selectInputSpot } from \"../actions/actions\";\nimport { UserBoard } from \"../views/buttons/UserBoard\";\n\nfunction mapStateToProps(state) {\n  return {\n    userBoard: state.userBoard.board,\n    userSelected: state.userSelected,\n    hints: state.userBoard.hints,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeInputSpot: (index) => dispatch(selectInputSpot(index)),\n  };\n}\n\nexport const UserBoardContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserBoard);\n","import React from \"react\";\nimport { CreateOwnCodeSubmitContainer } from \"../containers/CreateOwnCodeSubmitContainer\";\nimport { UserBoardContainer } from \"../containers/UserBoardContainer\";\n\nexport function PlayerCreateCodeView(props) {\n  return (\n    <section>\n      <h1>Design Code</h1>\n      <UserBoardContainer />\n      <CreateOwnCodeSubmitContainer />\n    </section>\n  );\n}\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nfunction sentenceOne(red, white) {\n  return `Hey, your last code had ${red} exactly right and ${white} that were in the wrong place. Almost there!`;\n}\n\nfunction sentenceTwo(red, white) {\n  return `Above code had ${red} correct, ${white} were spotted else where in the code`;\n}\n\nfunction sentenceThree(red, white) {\n  return `OMG YOU HAD ${red} PERFECTS, ON THE SPOT, ABSOLUTELY PERFECT AND ${white}... almost perfects. Try again friend.`;\n}\n\nfunction randomPhraseGenerator(red, white, correct = false, random) {\n  let store = [sentenceOne, sentenceTwo, sentenceThree];\n  if (correct) {\n    return `Well done! That was exactly it!`;\n  }\n  return store[random](red, white);\n}\n\nexport function MoveHistory(props) {\n  let { previousMoves } = props;\n  let display;\n  if (previousMoves) {\n    let history = [];\n    for (let i = previousMoves.length - 1; i >= 0; i--) {\n      let {\n        moves,\n        redPegs,\n        whitePegs,\n        correctGuess,\n        randomPhrase,\n      } = previousMoves[i];\n\n      history.push(\n        <p key={`move history ${i}`}>\n          <h3>Move {moves.join(\" | \")}</h3>\n          <br />\n          {randomPhraseGenerator(\n            redPegs,\n            whitePegs,\n            correctGuess,\n            randomPhrase\n          )}\n        </p>\n      );\n    }\n    display = history;\n  } else {\n    display = null;\n  }\n  return (\n    <section id={\"move_history_container\"}>\n      <section className={\"move_history_title\"}>\n        <h1>Move History</h1>\n      </section>\n      <section className={\"history_display\"}>{display}</section>\n    </section>\n  );\n}\n\nMoveHistory.propTypes = {\n  previousMoves: PropTypes.array,\n};\n","import { connect } from \"react-redux\";\nimport { MoveHistory } from \"../views/MoveHistory\";\n\nfunction mapStateToProps(state) {\n  return {\n    previousMoves: state.moveHistory,\n  };\n}\n\nexport const MoveHistoryContainer = connect(mapStateToProps)(MoveHistory);\n","import { connect } from \"react-redux\";\nimport { ScoreView } from \"../views/ScoreView\";\n\nfunction mapStateToProps(state) {\n  return {\n    score: state.score,\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nexport const ScoreContainer = connect(mapStateToProps)(ScoreView);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function ScoreView(props) {\n  let { score, isTwoPlayer } = props;\n  let showScore = score;\n  if (isTwoPlayer) {\n    showScore =\n      isTwoPlayer.playerNumTurn === 1 ? isTwoPlayer[1] : isTwoPlayer[2];\n  }\n  return <p>Score: {showScore}</p>;\n}\n\nScoreView.propTypes = {\n  score: PropTypes.number,\n  isTwoPlayer: PropTypes.object,\n};\n","import { connect } from \"react-redux\";\nimport { oneMoreChance } from \"../actions/actions\";\nimport { GameOverView } from \"../views/GameOverView\";\n\nfunction mapStateToProps(state) {\n  return {\n    winner: state.winner,\n    showCode: state.correctCode.code,\n    gameType: state.gameType,\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nfunction mapDispatchToState(dispatch) {\n  return {\n    oneMoreChance: () => dispatch(oneMoreChance()),\n  };\n}\n\nexport const GameOverContainer = connect(\n  mapStateToProps,\n  mapDispatchToState\n)(GameOverView);\n","import React, { useState } from \"react\";\nimport { CLASSIC_MODE, TIMED_MODE } from \"../actions/actionTypes\";\nimport { GameSelectContainer } from \"../containers/GameSelectContainer\";\nimport { MoveHistoryContainer } from \"../containers/MoveHistoryContainer\";\nimport { ScoreContainer } from \"../containers/ScoreContainer\";\nimport { PropTypes } from \"prop-types\";\n\nexport function GameOverView(props) {\n  let { winner, showCode, oneMoreChance, gameType, isTwoPlayer } = props;\n  let [newGame, toggleNewGame] = useState(false);\n  let [isAnswerSeen, showAnswer] = useState(false);\n  let playAgainButton = newGame ? null : (\n    <button onClick={() => toggleNewGame(!newGame)}>Play Again?</button>\n  );\n  let gameSelect = newGame ? <GameSelectContainer /> : null;\n  if (isTwoPlayer) {\n    let score1 = isTwoPlayer[1];\n    let score2 = isTwoPlayer[2];\n    let moveCounts = (\n      <>\n        <p>Player 1: {score1} </p>\n        <p>Player2: {score2} </p>\n      </>\n    );\n    if (score1 === score2) {\n      return (\n        <section className={\"intro_screen\"}>\n          <h1>DRAW!</h1>\n          <p>Yall should play again</p>\n          {moveCounts}\n\n          {playAgainButton}\n          {gameSelect}\n        </section>\n      );\n    }\n    let winner, loser, moves;\n    if (gameType === TIMED_MODE) {\n      [winner, loser, moves] =\n        score1 > score2\n          ? [1, 2, `getting ${score1 - score2} more correct`]\n          : [2, 1, `getting ${score2 - score1} more correct`];\n    } else {\n      [winner, loser, moves] =\n        score1 > score2\n          ? [2, 1, `${score1 - score2} moves`]\n          : [1, 2, `${score2 - score1} moves`];\n    }\n\n    return (\n      <section className={\"intro_screen\"}>\n        <h1>Congratulations: Player {winner}</h1>\n        <p>\n          You beat Player {loser} by {moves}{\" \"}\n        </p>\n        {moveCounts}\n        {playAgainButton}\n        {gameSelect}\n      </section>\n    );\n  }\n\n  if (gameType === CLASSIC_MODE) {\n    let [showAnswerButton, answer] = isAnswerSeen\n      ? // eslint-disable-next-line react/jsx-key\n        [null, <p>{showCode}</p>]\n      : // eslint-disable-next-line react/jsx-key\n        [null, <button onClick={() => showAnswer(true)}>Show Answer</button>];\n    let isWinner = winner ? (\n      <h1>You win :(</h1>\n    ) : (\n      <>\n        <h1>You lose :)</h1>\n        <button onClick={oneMoreChance}>One More Chance</button>\n      </>\n    );\n    return (\n      <>\n        <section className={\"gameover_view\"}>\n          <h1>Game Over!</h1>\n          <h3>You Played Classic Mode</h3>\n          {isWinner}\n          <MoveHistoryContainer />\n          {answer}\n          {showAnswerButton}\n          {playAgainButton}\n          {gameSelect}\n        </section>\n      </>\n    );\n  } else if (gameType === TIMED_MODE) {\n    return (\n      <>\n        <section className={\"gameover_view\"}>\n          <h1>Game Over!</h1>\n          <h3>You Played Timed Mode</h3>\n          <ScoreContainer />\n          <MoveHistoryContainer />\n          {playAgainButton}\n          {gameSelect}\n        </section>\n      </>\n    );\n  }\n}\n\nGameOverView.propTypes = {\n  winner: PropTypes.bool,\n  showCode: PropTypes.array,\n  oneMoreChance: PropTypes.func,\n  gameType: PropTypes.string,\n  switchModes: PropTypes.func,\n};\n","import React from \"react\";\nimport { CLASSIC_MODE, TIMED_MODE } from \"../../actions/actionTypes\";\nimport store from \"../../createStore\";\n\nexport function IntroScreenView() {\n  return (\n    <section className={\"intro_screen\"}>\n      <button\n        onClick={() => store.dispatch({ type: CLASSIC_MODE })}\n        className={\"game_options\"}\n      >\n        Classic Mode\n      </button>\n      <button\n        onClick={() => store.dispatch({ type: TIMED_MODE })}\n        className={\"game_options\"}\n      >\n        Timed Mode\n      </button>\n    </section>\n  );\n}\n","import { connect } from \"react-redux\";\nimport { setOnePlayer, setTwoPlayer } from \"../actions/actions\";\nimport { VersusModeButton } from \"../views/buttons/VersusModeButton\";\n\nfunction mapDispatchtoState(dispatch) {\n  return {\n    onePlayer: () => dispatch(setOnePlayer()),\n    twoPlayer: () => dispatch(setTwoPlayer()),\n  };\n}\n\nexport const VersusModeContainer = connect(\n  null,\n  mapDispatchtoState\n)(VersusModeButton);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function VersusModeButton(props) {\n  let { onePlayer, twoPlayer } = props;\n  return (\n    <section className={\"versus_mode_seletor\"}>\n      <button onClick={onePlayer}>One Player</button>\n      <button onClick={twoPlayer}>Two Player</button>\n    </section>\n  );\n}\n\nVersusModeButton.propTypes = {\n  onePlayer: PropTypes.func,\n  twoPlayer: PropTypes.func,\n};\n","import { connect } from \"react-redux\";\nimport {\n  gameWon,\n  actionUserMoveToHistory,\n  gameLost,\n  versusComputer,\n  updateScore,\n  changeTurn,\n  twoPlayerAddScore,\n} from \"../actions/actions\";\nimport { checkUserGuess } from \"../gameLogic/gameLogicFunctions\";\nimport store from \"../createStore\";\nimport { SubmitButton } from \"../views/buttons/SubmitButton\";\nimport {\n  CLASSIC_MODE,\n  SET_SCREEN_CHANGE,\n  TIMED_MODE,\n} from \"../actions/actionTypes\";\n\nfunction mapStateToProps(state) {\n  return {\n    numbersGuessed: state.userBoard.numbersGuessed,\n    codeLength: state.advancedOptions.codeLength,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    //handle logic to seperate timedMode vs classicMode\n    submit: () => {\n      let state = store.getState();\n      let {\n        correctCode,\n        gameType,\n        userBoard,\n        advancedOptions,\n        isTwoPlayer,\n      } = state;\n      let userBoardValues = userBoard.board.slice();\n      let { code, countOfEachNum } = correctCode;\n      let checkAnswer = checkUserGuess(userBoardValues, code, countOfEachNum);\n      let { red, white } = checkAnswer;\n      let previousMove = {\n        moves: userBoardValues,\n        redPegs: red,\n        whitePegs: white,\n      };\n      let {\n        codeLength,\n        codeOptions,\n        turnsAllowed,\n        timeAllowed,\n        turnsMade,\n      } = advancedOptions;\n      let usePhrase = Math.floor(Math.random() * 3);\n      previousMove[\"randomPhrase\"] = usePhrase;\n\n      if (isTwoPlayer === false) {\n        if (gameType === CLASSIC_MODE) {\n          if (checkAnswer.red === userBoardValues.length) {\n            previousMove[\"correctGuess\"] = true;\n            dispatch(gameWon());\n          } else {\n            if (turnsAllowed - turnsMade === 1) {\n              dispatch(gameLost());\n            }\n          }\n        } else if (state.gameType === TIMED_MODE) {\n          if (checkAnswer.red === userBoardValues.length) {\n            dispatch(updateScore());\n            dispatch(versusComputer(codeLength, codeOptions));\n            previousMove[\"correctGuess\"] = true;\n          }\n        }\n\n        dispatch(actionUserMoveToHistory(previousMove));\n      } else {\n        if (gameType === CLASSIC_MODE) {\n          if (checkAnswer.red === userBoardValues.length) {\n            if (isTwoPlayer.playerNumTurn === 2) {\n              //if second player just finished => gameover to display who won\n              dispatch(twoPlayerAddScore(2, turnsMade));\n              //add last move for accurate score\n              dispatch(gameWon());\n            } else {\n              dispatch(twoPlayerAddScore(1, turnsMade));\n              dispatch(changeTurn());\n              dispatch(versusComputer(codeLength, codeOptions, turnsAllowed));\n              dispatch({ type: SET_SCREEN_CHANGE });\n            }\n          } else {\n            dispatch(actionUserMoveToHistory(previousMove));\n          }\n        } else {\n          if (checkAnswer.red === userBoardValues.length) {\n            if (isTwoPlayer.playerNumTurn === 2) {\n              dispatch(twoPlayerAddScore(2, \"add\"));\n            } else {\n              dispatch(twoPlayerAddScore(1, \"add\"));\n            }\n            dispatch(\n              versusComputer(codeLength, codeOptions, null, timeAllowed)\n            );\n            previousMove[\"correctGuess\"] = true;\n          }\n          dispatch(actionUserMoveToHistory(previousMove));\n        }\n      }\n    },\n  };\n}\n\nexport const SubmitButtonContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SubmitButton);\n","export function altCheckUserGuess(userAnswer, correctAnswer, countOfEachNum) {\n  //compare which indexes have the same num\n  //if not compare to reference to see if there are nums in other locations\n  let redPegs = 0;\n  let whitePegs = 0;\n  let incorrectCode = {};\n  let countUserGuess = {};\n  for (let i = 0; i < userAnswer.length; i++) {\n    let user = userAnswer[i];\n    let correct = correctAnswer[i];\n    if (user === correct) {\n      redPegs++;\n      countUserGuess[user] = countUserGuess[user] + 1 || 1;\n      //count pegs that were correctly guessed to avoid overcounting guessses not in right place\n    } else {\n      incorrectCode[user] = incorrectCode[user] + 1 || 1;\n    }\n  }\n  for (let guess in incorrectCode) {\n    let alreadyCountedPegs = countUserGuess[guess] || 0;\n    //these are pegs that were correctly guessed\n    if (alreadyCountedPegs < countOfEachNum[guess]) {\n      //if there are more pegs in correct code with this color\n      let difference = countOfEachNum[guess] - alreadyCountedPegs;\n      //get difference in how much of the color is remaining in correct code\n      whitePegs += Math.min(difference, incorrectCode[guess]);\n      //add the min between number of times user guess this color in the wrong place vs\n      //difference how many of these colors remain after removing the correct ones\n    }\n  }\n\n  return { redPegs: redPegs, whitePegs: whitePegs };\n}\n\nexport function checkUserGuess(userAnswer, correctAnswer, countOfEachNum) {\n  /*\n  [0,4,0,4,0,4] correct\n  [4,4,4,4,4,4] guess\n  at i === 0 \n  by i == 3, count[2] === 0\n  white = 2\n  red = 1\n\n\n  */\n  //alternatively consider copying countOfEachNum, removing from it as we iterate userAnswer,\n  //if we hit a perfect match and countOfEachNum < 0, we remove white and add to red\n  let clone = Object.assign({}, countOfEachNum);\n  let red = 0;\n  let white = 0;\n  for (let i = 0; i < userAnswer.length; i++) {\n    let user = userAnswer[i];\n    let correct = correctAnswer[i];\n    if (user === correct) {\n      red++;\n      if (clone[user] <= 0) {\n        white--;\n      }\n      clone[user]--;\n    } else {\n      if (clone[user] > 0) {\n        white++;\n        clone[user]--;\n      }\n    }\n  }\n  return { red: red, white: white };\n}\n","import React from \"react\";\nimport { addExtraTurn } from \"../../actions/actions\";\nimport store from \"../../createStore\";\n\nexport function AddExtraTurnButton() {\n  let state = store.getState();\n  if (state.isTwoPlayer) {\n    return null;\n  }\n  return (\n    <button\n      onClick={() => store.dispatch(addExtraTurn())}\n      className={\"game_options\"}\n    >\n      Add Extra Turn?\n    </button>\n  );\n}\n","import { connect } from \"react-redux\";\nimport { hintRequested } from \"../actions/actions\";\nimport store from \"../createStore\";\nimport { HintButton } from \"../views/buttons/HintButton\";\n\nfunction handleHintGivenLogic(correct, currentGuess, previousGivenHints) {\n  //previousGiven hints === hash, others === array\n\n  for (let i = 0; i < currentGuess.length; i++) {\n    if (previousGivenHints[i] === undefined) {\n      return [i, correct[i]];\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    hintCount: state.userBoard.hintCount,\n    correctCode: state.correctCode,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    requestHint: () => {\n      let state = store.getState();\n      let { userBoard, correctCode } = state;\n      let { code } = correctCode;\n      let { hints, board } = userBoard;\n      let newHint = handleHintGivenLogic(code, board, hints);\n      dispatch(hintRequested(newHint[0], newHint[1]));\n    },\n  };\n}\n\nexport const HintButtonContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HintButton);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function HintButton(props) {\n  //since set code is async, i can mash the hint button and break it in timed mode\n  let { requestHint, hintCount, correctCode } = props;\n  return correctCode && hintCount < correctCode.code.length - 2 ? (\n    <button onClick={() => requestHint()}>Request Hint</button>\n  ) : null;\n}\n\nHintButton.propTypes = {\n  requestHint: PropTypes.func,\n  hintCount: PropTypes.number,\n  correctCode: PropTypes.object,\n};\n","import { connect } from \"react-redux\";\nimport { START_TURN } from \"../actions/actionTypes\";\nimport { ChangeTurnScreen } from \"../views/ChangeTurnScreen\";\n\nfunction mapStateToProps(state) {\n  return {\n    isTwoPlayer: state.isTwoPlayer,\n    turnChange: state.turnChange,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    startTurn: () => dispatch({ type: START_TURN }),\n  };\n}\n\nexport const ChangeTurnContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChangeTurnScreen);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function ChangeTurnScreen(props) {\n  let { isTwoPlayer, startTurn } = props;\n  return (\n    <section className={\"intro_screen\"}>\n      <button onClick={startTurn}>\n        Start Player {isTwoPlayer.playerNumTurn} Turn\n      </button>\n    </section>\n  );\n}\n\nChangeTurnScreen.propTypes = {\n  isTwoPlayer: PropTypes.object,\n  turnChange: PropTypes.bool,\n  startTurn: PropTypes.func,\n};\n","import { connect } from \"react-redux\";\nimport { ClassicMode } from \"../views/ClassicMode\";\nimport { TimedMode } from \"../views/TimedMode\";\n\nfunction mapStateToProps(state) {\n  return {\n    turnChange: state.turnChange,\n  };\n}\n\nexport const ClassicModeContainer = connect(mapStateToProps)(ClassicMode);\nexport const TimedModeContainer = connect(mapStateToProps)(TimedMode);\n","import React from \"react\";\nimport { MoveHistoryContainer } from \"../containers/MoveHistoryContainer\";\nimport { UserBoardContainer } from \"../containers/UserBoardContainer\";\nimport { SubmitButtonContainer } from \"../containers/SubmitButtonContainer\";\nimport { AddExtraTurnButton } from \"./buttons/AddExtraTurnButton\";\nimport { HintButtonContainer } from \"../containers/HintButtonContainer\";\nimport { ChangeTurnContainer } from \"../containers/ChangeTurnContainer\";\nimport { PropTypes } from \"prop-types\";\n\nexport function ClassicMode(props) {\n  let { turnChange } = props;\n  if (turnChange) {\n    return <ChangeTurnContainer />;\n  }\n  return (\n    <>\n      <section className={\"user_input\"}>\n        <MoveHistoryContainer />\n        <section className={\"input_section\"}>\n          <h1>My Guess</h1>\n          <UserBoardContainer />\n        </section>\n        <section className={\"code_submit\"}>\n          <SubmitButtonContainer />\n          <HintButtonContainer />\n          <AddExtraTurnButton />\n        </section>\n      </section>\n    </>\n  );\n}\n\nClassicMode.propTypes = {\n  turnChange: PropTypes.bool,\n};\n","import React from \"react\";\nimport { MoveHistoryContainer } from \"../containers/MoveHistoryContainer\";\nimport { UserBoardContainer } from \"../containers/UserBoardContainer\";\nimport { SubmitButtonContainer } from \"../containers/SubmitButtonContainer\";\nimport { HintButtonContainer } from \"../containers/HintButtonContainer\";\nimport { PropTypes } from \"prop-types\";\nimport { ChangeTurnContainer } from \"../containers/ChangeTurnContainer\";\n\nexport function TimedMode(props) {\n  let { turnChange } = props;\n  if (turnChange) {\n    return <ChangeTurnContainer />;\n  }\n  return (\n    <>\n      <section className={\"user_input\"}>\n        <MoveHistoryContainer />\n\n        <section className={\"code_select\"}>\n          <h1>My Guess</h1>\n          <UserBoardContainer />\n        </section>\n        <section className={\"code_submit\"}>\n          <SubmitButtonContainer />\n          <HintButtonContainer />\n        </section>\n      </section>\n    </>\n  );\n}\nTimedMode.propTypes = {\n  turnChange: PropTypes.bool,\n};\n","import { connect } from \"react-redux\";\nimport { Mastermind } from \"../views/Mastermind\";\n\nfunction mapStateToProps(state) {\n  return {\n    gameStatus: state.gameStatus,\n    winner: state.winner,\n    versusComputer: state.advancedOptions.computer,\n    gameType: state.gameType,\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nexport const MastermindContainer = connect(mapStateToProps)(Mastermind);\n","import React from \"react\";\nimport { GameSelectContainer } from \"../containers/GameSelectContainer\";\nimport { PlayerCreateCodeView } from \"./PlayerCreateCodeView\";\nimport { GameOverContainer } from \"../containers/GameOverContainer\";\nimport { IntroScreenView } from \"./buttons/IntroScreenView\";\nimport { VersusModeContainer } from \"../containers/VersusButtonContainer\";\nimport { CLASSIC_MODE, TIMED_MODE } from \"../actions/actionTypes\";\nimport PropTypes from \"prop-types\";\nimport {\n  ClassicModeContainer,\n  TimedModeContainer,\n} from \"../containers/PlayModeContainers\";\n\nexport function Mastermind(props) {\n  let { gameStatus, winner, versusComputer, gameType, isTwoPlayer } = props;\n  //if game type is null, means we haven't started the game at all, display intro screen\n  if (isTwoPlayer === null) {\n    return <VersusModeContainer />;\n  }\n  if (gameType === null) {\n    return <IntroScreenView />;\n  }\n  let display;\n  //if winner is not null, means game is over.\n  if (winner !== null) {\n    display = <GameOverContainer />;\n  } else if (!gameStatus) {\n    //if game status is false, means we've selected game type, no winner or loser, so we need to set code options\n    if (versusComputer === false) {\n      //by default versus computer is null, will only run if gameStatus is false and versus computer is false aka after GameSelect has chosen vs player\n      display = (\n        <section className={\"start_game_select\"}>\n          <PlayerCreateCodeView />\n        </section>\n      );\n    } else {\n      //if game status is false, means we need to set up game.\n      display = (\n        <section className={\"start_game_select\"}>\n          <GameSelectContainer />\n        </section>\n      );\n    }\n\n    //if game started, no winner, and game type is selected, one of these will run\n  } else if (gameType === TIMED_MODE) {\n    //if game started, no winner, and game type is selected, one of these will run\n    display = <TimedModeContainer />;\n  } else if (gameType === CLASSIC_MODE) {\n    display = <ClassicModeContainer />;\n  }\n\n  return display;\n}\n\nMastermind.propTypes = {\n  gameStatus: PropTypes.bool,\n  winner: PropTypes.bool,\n  versusComputer: PropTypes.bool,\n  gameType: PropTypes.string,\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nfunction minutesToMilliseconds(minutes) {\n  let seconds = minutes * 60;\n  let milliseconds = seconds * 1000;\n  return milliseconds;\n}\nexport function CountdownTimer(props) {\n  let { endGame, timeAllowed, isTwoPlayer, changeTurn, turnChange } = props;\n  let [remainingTime, updateTime] = useState(`${timeAllowed}:00`);\n  let countDownFrom = useRef(minutesToMilliseconds(timeAllowed));\n  useEffect(() => {\n    if (turnChange) {\n      countDownFrom.current = minutesToMilliseconds(timeAllowed);\n      return null;\n    }\n    let interval = setInterval(() => {\n      countDownFrom.current -= 1000;\n\n      if (countDownFrom.current <= 0) {\n        if (isTwoPlayer.playerNumTurn === 1) {\n          changeTurn();\n        } else {\n          endGame();\n        }\n        clearInterval(interval);\n      }\n      let toMinutes = countDownFrom.current / 60000;\n      let minutes = Math.floor(toMinutes);\n      let toSeconds = countDownFrom.current % 60000;\n      let seconds = Math.floor(toSeconds / 1000);\n      if (seconds < 10) {\n        seconds = \"0\" + seconds;\n      }\n      updateTime(`${minutes}:${seconds}`);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [endGame, changeTurn, isTwoPlayer, turnChange]);\n\n  return <p>Time Remaining: {`${remainingTime}`}</p>;\n}\n\nCountdownTimer.propTypes = {\n  endGame: PropTypes.func,\n  timeAllowed: PropTypes.number,\n  isTwoPlayer: PropTypes.object,\n  changeTurn: PropTypes.func,\n  turnChange: PropTypes.bool,\n};\n","import { connect } from \"react-redux\";\nimport { changeTurn, gameWon } from \"../actions/actions\";\nimport { SET_SCREEN_CHANGE } from \"../actions/actionTypes\";\nimport { CountdownTimer } from \"../views/CountdownTimer\";\n\nfunction mapStateToProps(state) {\n  return {\n    timeAllowed: state.advancedOptions.timeAllowed,\n    isTwoPlayer: state.isTwoPlayer,\n    turnChange: state.turnChange,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    endGame: () => dispatch(gameWon()),\n    changeTurn: () => {\n      dispatch({ type: SET_SCREEN_CHANGE });\n      dispatch(changeTurn());\n    },\n  };\n}\n\nexport const CountdownTimerContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CountdownTimer);\n","import { connect } from \"react-redux\";\nimport { TurnsRemaining } from \"../views/TurnsRemaining\";\n\nfunction mapStateToProps(state) {\n  return {\n    turnsAllowed: state.advancedOptions.turnsAllowed,\n    turnsMade: state.advancedOptions.turnsMade,\n    isTwoPlayer: state.isTwoPlayer,\n  };\n}\n\nexport const TurnsRemainingContainer = connect(mapStateToProps)(TurnsRemaining);\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport function TurnsRemaining(props) {\n  let { turnsAllowed, turnsMade, isTwoPlayer } = props;\n  if (isTwoPlayer) {\n    return <p> Moves Made: {turnsMade}</p>;\n  }\n  return <p>Turns Remaining: {turnsAllowed - turnsMade}</p>;\n}\n\nTurnsRemaining.propTypes = {\n  turnsAllowed: PropTypes.number,\n  turnsMade: PropTypes.number,\n  isTwoPlayer: PropTypes.object,\n};\n","import { connect } from \"react-redux\";\nimport { TitleView } from \"../views/TitleView\";\n\nfunction mapStateToProps(state) {\n  return {\n    gameType: state.gameType,\n    gameStatus: state.gameStatus,\n    numPlayers: state.isTwoPlayer,\n  };\n}\n\nexport const TitleContainer = connect(mapStateToProps)(TitleView);\n","import React from \"react\";\nimport { ModeDisplayContainer } from \"../containers/ModeDisplayContainer\";\nimport { ScoreContainer } from \"../containers/ScoreContainer\";\nimport { CountdownTimerContainer } from \"../containers/CountdownTimerContainer\";\nimport { CLASSIC_MODE, TIMED_MODE } from \"../actions/actionTypes\";\nimport { TurnsRemainingContainer } from \"../containers/TurnsRemainingContainer\";\nimport { PropTypes } from \"prop-types\";\n\nexport function TitleView(props) {\n  let { gameType, gameStatus, numPlayers } = props;\n  let gameInfo = null;\n  let players = numPlayers ? (\n    <p>Player {numPlayers.playerNumTurn} Turn</p>\n  ) : (\n    <p>Single Player</p>\n  );\n  if (gameType === TIMED_MODE && gameStatus) {\n    gameInfo = (\n      <section className={\"mode_info\"}>\n        <ModeDisplayContainer />\n        <ScoreContainer />\n        {players}\n        <CountdownTimerContainer />\n      </section>\n    );\n  }\n  if (gameType === CLASSIC_MODE && gameStatus) {\n    gameInfo = (\n      <section className={\"mode_info\"}>\n        <ModeDisplayContainer />\n        {players}\n        <TurnsRemainingContainer />\n      </section>\n    );\n  }\n  return (\n    <section className={\"title\"}>\n      <h1 className={\"game_name\"}>Mastermind</h1>\n      {gameInfo}\n    </section>\n  );\n}\n\nTitleView.propTypes = {\n  gameType: PropTypes.string,\n  gameStatus: PropTypes.bool,\n  numPlayers: PropTypes.object,\n};\n","import \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./createStore\";\nimport { MastermindContainer } from \"./containers/MastermindContainer\";\nimport React from \"react\";\nimport { TitleContainer } from \"./containers/TitleContainer\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"container\">\n        <TitleContainer />\n        <MastermindContainer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}